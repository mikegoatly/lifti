@page "/"
@inject WikipediaIndexService IndexService
@inject WikipediaPageProvider WikipediaPageProvider

<p>This example fetches random Wikipedia page content and indexes the text in it. You can try out various LIFTI searches to find content in them.</p>

<div class="d-flex flex-column">

    <div class="d-flex flex-row mb-2 align-items-center">
        <EditForm class="me-2 d-flex flex-row" Model=@this>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="stemmingEnabled" @bind=@StemmingEnabled>
                <label class="form-check-label" for="stemmingEnabled">Use word stemming when indexing</label>
            </div>

            <div class="form-check form-switch ms-2">
                <input class="form-check-input" type="checkbox" id="fuzzyMatch" @bind=@FuzzyMatchByDefault>
                <label class="form-check-label" for="fuzzyMatch">Fuzzy match by default</label>
            </div>
        </EditForm>

        <div class=@(IndexRebuildRequired ? "" : "invisible")>
            <button class="btn btn-warning"
                    @onclick=@(async () => await RebuildIndex())>
                Rebuild index
            </button>
        </div>
    </div>

    <div class="alert alert-@(this.errored ? "danger" : "secondary") d-flex justify-content-around">
        <span class="align-self-center">@Message</span>

        <div class="flex-fill d-flex align-items-center">
            <span class="me-2 flex-fill text-end">@IndexService.IndexCount pages indexed.</span>
            <button disabled=@indexing class="btn btn-secondary" @onclick="() => IndexRandomPagesAsync(10)">Index 10 more...</button>
            <button disabled=@indexing class="btn btn-secondary ms-2" @onclick="() => IndexRandomPagesAsync(100)">Index 100 more...</button>
        </div>
    </div>

    <div class="d-flex flex-row mb-2 justify-content-between">
        <form @onsubmit=@((e) => Task.FromResult(false)) class="flex-fill d-flex">
            <input type="text" @bind="SearchText" class="flex-fill" />
            <button type="submit" class="btn btn-primary ms-2" @onclick="Search">Search</button>
            <a href="https://mikegoatly.github.io/lifti/docs/searching/" class="align-self-center ms-2" target="_blank">Query language syntax</a>
        </form>
        <div>
            <button class="btn btn-secondary ms-2" @onclick="ShowAll">Show all</button>
            <button class="btn btn-secondary ms-2" @onclick="Clear">Clear results</button>
            <button class="btn btn-secondary ms-2" @onclick="ShowIndex">Show me the index</button>
        </div>
    </div>

    @if (this.ShowingRootNode != null)
    {
        foreach (var child in this.ShowingRootNode.ChildNodes.CharacterMap)
        {
            <IndexNodeElement Name="@child.ChildChar.ToString()" Node="@child.ChildNode" ParentName="" />
        }
    }
    else if (this.SyntaxError != null)
    {
        <div class="alert alert-danger d-flex">
            <span class="align-self-center">@this.SyntaxError</span>
        </div>
    }
    else if (results != null)
    {
        <div class="container-fluid border-primary border-top flex-fill overflow-auto pt-3">
            <Blazor.Controls.TabControl>
                <Blazor.Controls.TabPage Text="@("Results (" + results.Count + ")")">
                    <div class="row">

                        @if (results.Count == 0)
                        {
                            <div class="alert alert-info d-flex">
                                <span class="align-self-center">No matches!</span>
                            </div>
                        }
                        else
                        {
                            <div class="container-fluid flex-fill">
                                <div class="row">
                                    <ul class="col-3 search-results pe-2 pt-2 border-primary border-right">
                                        @foreach (var result in results)
                                        {
                                            <li class="p-1 @(result == this.selectedSearchResult ? "selected" : "")" @onclick="() => this.selectedSearchResult = result">
                                                <span>@result.Key</span>
                                                <span>Score @result.Score.ToString("0.####")</span>
                                            </li>
                                        }
                                    </ul>
                                    <ResultView SelectedSearchResult="@selectedSearchResult" />
                                </div>
                            </div>
                        }
                    </div>
                </Blazor.Controls.TabPage>
                <Blazor.Controls.TabPage Text="Execution Plan">
                    <div class="row">
                        <QueryExecutionPlanView ExecutionPlan="@executionPlan" />
                    </div>
                </Blazor.Controls.TabPage>
            </Blazor.Controls.TabControl>
        </div>
    }
    else
    {
        <Blazor.Shared.ExampleSearches />
    }
</div>


