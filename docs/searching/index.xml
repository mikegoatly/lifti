<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LIFTI – Searching</title>
    <link>https://mikegoatly.github.io/lifti/docs/searching/</link>
    <description>Recent content in Searching on LIFTI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://mikegoatly.github.io/lifti/docs/searching/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: The LIFTI Query Syntax</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/lifti-query-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/lifti-query-syntax/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t want to use advanced queries? You&amp;rsquo;ll want to configure the &lt;a href=&#34;../simple-queries&#34;&gt;simple query parser&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;quick-examples&#34;&gt;Quick examples&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;West&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;West&lt;/strong&gt; must appear in the text &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#exact-word-matches&#34;&gt;exactly&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;West|Wing^2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;West&lt;/strong&gt; or &lt;strong&gt;Wing&lt;/strong&gt; must appear in the text &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#exact-word-matches&#34;&gt;exactly&lt;/a&gt;, where matches on &lt;strong&gt;Wing&lt;/strong&gt; will have a &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#score-boosting&#34;&gt;score boost&lt;/a&gt; of 2.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?Wst&lt;/td&gt;
&lt;td&gt;Words that &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#fuzzy-match-&#34;&gt;fuzzy match&lt;/a&gt; with &lt;strong&gt;wst&lt;/strong&gt; must appear in the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?3,2?Wst&lt;/td&gt;
&lt;td&gt;Words that &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#fuzzy-match-&#34;&gt;fuzzy match&lt;/a&gt; with &lt;strong&gt;wst&lt;/strong&gt; must appear in the text, with a specified max edit distance and max sequential edits.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title=West&lt;/td&gt;
&lt;td&gt;A &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#field-restrictions-field&#34;&gt;field restricted&lt;/a&gt; search. &lt;strong&gt;West&lt;/strong&gt; must appear in the &lt;em&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/em&gt; field of an indexed object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;doc*&lt;/td&gt;
&lt;td&gt;Words that starts with &lt;strong&gt;doc&lt;/strong&gt;ument must appear in the text. &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#wildcard-matching&#34;&gt;See wildcard matching&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%%ing&lt;/td&gt;
&lt;td&gt;Words that starts with any two letters and end with &lt;strong&gt;ing&lt;/strong&gt;, e.g. &lt;em&gt;doing&lt;/em&gt;. &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#wildcard-matching&#34;&gt;See wildcard matching&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west &amp;amp; wing&lt;/td&gt;
&lt;td&gt;The words &lt;strong&gt;west&lt;/strong&gt; &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#and-&#34;&gt;and&lt;/a&gt; &lt;strong&gt;wing&lt;/strong&gt; must appear in the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west wing&lt;/td&gt;
&lt;td&gt;The words &lt;strong&gt;west&lt;/strong&gt; &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#and-&#34;&gt;and&lt;/a&gt; &lt;strong&gt;wing&lt;/strong&gt; must appear in the text - the default operator is &amp;amp; if none is specified between search words.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west | wing&lt;/td&gt;
&lt;td&gt;The words &lt;strong&gt;west&lt;/strong&gt; &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#or-&#34;&gt;or&lt;/a&gt; &lt;strong&gt;wing&lt;/strong&gt; must appear in the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west ~ wing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;west&lt;/strong&gt; and &lt;strong&gt;wing&lt;/strong&gt; must appear &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#near--and-n&#34;&gt;near to each other&lt;/a&gt; (within 5 words - the default) in the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west ~3 wing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;west&lt;/strong&gt; and &lt;strong&gt;wing&lt;/strong&gt; must appear &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#near--and-n&#34;&gt;near to each other&lt;/a&gt; (within &lt;strong&gt;3&lt;/strong&gt; words) in the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west ~&amp;gt; wing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;west&lt;/strong&gt; must be &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#near-following--and-n&#34;&gt;followed by&lt;/a&gt; &lt;strong&gt;wing&lt;/strong&gt; closely (within 5 words - the default) in the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west ~3&amp;gt; wing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;west&lt;/strong&gt; must be &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#near-following--and-n&#34;&gt;followed by&lt;/a&gt; &lt;strong&gt;wing&lt;/strong&gt; closely (within &lt;strong&gt;3&lt;/strong&gt; words) in the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;west &amp;gt; wing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;west&lt;/strong&gt; must &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#following-&#34;&gt;precede&lt;/a&gt; &lt;strong&gt;wing&lt;/strong&gt; anywhere in the text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ldquo;the west wing&amp;rdquo;&lt;/td&gt;
&lt;td&gt;The words &lt;strong&gt;the west wing&lt;/strong&gt; must appear &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#sequential-text-&#34;&gt;in sequence&lt;/a&gt; in the indexed text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ldquo;notr* dam*&amp;rdquo;&lt;/td&gt;
&lt;td&gt;You can use &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#wildcard-matching&#34;&gt;wildcards&lt;/a&gt; and &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#fuzzy-match-&#34;&gt;fuzzy matching&lt;/a&gt; in a &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#sequential-text-&#34;&gt;sequential text&lt;/a&gt; query. In this case, a word starting with &lt;strong&gt;notr&lt;/strong&gt; must be immediately followed by a word starting with &lt;strong&gt;dam&lt;/strong&gt;, e.g. &lt;strong&gt;Notre Dame&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Search terms can be combined and placed in parenthesis:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ldquo;west wing&amp;rdquo; ~ &amp;ldquo;oval office&amp;rdquo;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;West wing&lt;/strong&gt; must appear near &lt;strong&gt;Oval Office&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(west | east) &amp;amp; wing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;west wing&lt;/strong&gt; or &lt;strong&gt;east wing&lt;/strong&gt; must appear in the document.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;query-operators&#34;&gt;Query Operators&lt;/h2&gt;
&lt;h3 id=&#34;exact-word-matches&#34;&gt;Exact word matches&lt;/h3&gt;
&lt;p&gt;Any text in a query will be tokenized using to the provided tokenizer,
enforcing the same word stemming, case/accent sensitivity rules as used in the index.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;fuzzy-match-&#34;&gt;Fuzzy match (&lt;code&gt;?&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;By prefixing a search term with &lt;code&gt;?&lt;/code&gt; a fuzzy matching algorithm will be used to match the search term against the index. You can optionally specify the maximum edit distance and maximum number of sequential edits
for a specific search term using the formats:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?{max edits},{max sequential edits}?term&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example &lt;code&gt;?2,1?food&lt;/code&gt; will search for &amp;ldquo;food&amp;rdquo; with a maximum number of edits of 2, and maximum sequential edits of 1.&lt;/p&gt;
&lt;p&gt;You can omit one or the other parameter if required, so &lt;code&gt;?2?food&lt;/code&gt; will only set the maximum number of edits to 2, leaving the maximum sequential edits at the default value. If you want to only include
the maximum number of sequential edits, then you must include a leading comma in the parameter set, e.g. &lt;code&gt;?,2?food&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;../fuzzy-matching&#34;&gt;Fuzzy Matching&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h4 id=&#34;defaulting-search-terms-to-fuzzy-matching&#34;&gt;Defaulting search terms to fuzzy matching&lt;/h4&gt;
&lt;p&gt;By default LIFTI will treat a search term as an &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/lifti-query-syntax/#exact-word-matches&#34;&gt;exact word match&lt;/a&gt;, however &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/index-construction/withqueryparser/#configuring-the-default-lifti-queryparser&#34;&gt;you can configure the index&lt;/a&gt; so that any search term (apart from those containing wildcards)
will be treated as a fuzzy match.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;wildcard-matching&#34;&gt;Wildcard matching&lt;/h3&gt;
&lt;p&gt;Any search term containing &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; will be considered a wildcard match, where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; matches zero or more characters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; matches any single character. You can use multiple &lt;code&gt;%&lt;/code&gt; in a row to indicate an exact number of characters that need to be matched.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foo*&lt;/code&gt; would match occurrences of &lt;code&gt;food&lt;/code&gt; and &lt;code&gt;football&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*ing&lt;/code&gt; would match &lt;code&gt;drifting&lt;/code&gt; and &lt;code&gt;flying&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%%%ld&lt;/code&gt; would match &lt;code&gt;could&lt;/code&gt; and &lt;code&gt;mould&lt;/code&gt; (but &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;should&lt;/code&gt;, because it has 4 letters before the &lt;code&gt;ld&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%%p*&lt;/code&gt; matches words starting with any two characters followed by &lt;code&gt;g&lt;/code&gt;, then any zero or more characters, e.g. &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;caps&lt;/code&gt;, &lt;code&gt;duped&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;and-&#34;&gt;And (&lt;code&gt;&amp;amp;&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;The and operator (&lt;code&gt;&amp;amp;&lt;/code&gt;) Performs an intersection of two intermediate query results, combining word positions for successful matches.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Food &amp;amp; Burger&lt;/code&gt; searches for documents containing both &lt;code&gt;&amp;quot;food&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;burger&amp;quot;&lt;/code&gt; at any position, and in any field.&lt;/p&gt;
&lt;p&gt;(Alternatively &lt;code&gt;Food Burger&lt;/code&gt; will have the same effect as the default operator between query parts is an &lt;code&gt;&amp;amp;&lt;/code&gt;.)&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;or-&#34;&gt;Or (&lt;code&gt;|&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Performs a union of two intermediate query results. Where a document appears in both sets, word positions are combined into one list.&lt;/p&gt;
&lt;p&gt;Restricts results to same field by default: &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;bracketing-expressions&#34;&gt;Bracketing expressions&lt;/h3&gt;
&lt;p&gt;Brackets can be used to group expressions together.&lt;/p&gt;
&lt;p&gt;e.g. &lt;code&gt;(food &amp;amp; cake) | (cheese &amp;amp; biscuit)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;field-restrictions-field&#34;&gt;Field restrictions (&lt;code&gt;field=...&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;These allow for restricting searches within a given field.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;title=analysis | body=(chocolate &amp;amp; cake)&lt;/code&gt; Searches for documents with &lt;code&gt;&amp;quot;analysis&amp;quot;&lt;/code&gt; in the title field &lt;em&gt;or both&lt;/em&gt; &lt;code&gt;&amp;quot;chocolate&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;cake&amp;quot;&lt;/code&gt; in the body field.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;title=analysis food&lt;/code&gt; Searches for documents with &lt;code&gt;&amp;quot;analysis&amp;quot;&lt;/code&gt; in the title field &lt;em&gt;and&lt;/em&gt; &lt;code&gt;&amp;quot;food&amp;quot;&lt;/code&gt; in &lt;em&gt;any&lt;/em&gt; field.&lt;/p&gt;
&lt;p&gt;If your field name contains spaces or other special characters, you can escape it using square brackets &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;, e.g. &lt;code&gt;[my field]=chocolate&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sequential-text-&#34;&gt;Sequential text (&lt;code&gt;&amp;quot;...&amp;quot;&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Placing quotes around a search phrase will enforce that the words all appear
immediately next to each other in the source text.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;cheese burger&amp;quot;&lt;/code&gt; will only match documents that have text containing &lt;code&gt;&amp;quot;cheese&amp;quot;&lt;/code&gt; followed immediately by &lt;code&gt;&amp;quot;burger&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;near--and-n&#34;&gt;Near (&lt;code&gt;~&lt;/code&gt; and &lt;code&gt;~n&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;The near operator performs a positional intersection of two results based on the position of the word in a field.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;~&lt;/code&gt; operator requires that words must be within 5 words of one another. This can value can be controlled by specifying a number, e.g. &lt;code&gt;~4&lt;/code&gt; to restrict to only returning results within 4 words of one another.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cheese ~ cake&lt;/code&gt; will return documents containing the words &lt;code&gt;&amp;quot;cheese&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;cake&amp;quot;&lt;/code&gt; in either order, up to 5 words apart, e.g. &lt;code&gt;&amp;quot;the cake was made with cheese&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;I like cheese and cake&amp;quot;&lt;/code&gt; would both match, but &lt;code&gt;&amp;quot;cake is never to be considered a substitute for cheese&amp;quot;&lt;/code&gt; would not.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;near-following--and-n&#34;&gt;Near following (&lt;code&gt;~&amp;gt;&lt;/code&gt; and &lt;code&gt;~n&amp;gt;&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Same as Near (&lt;code&gt;~&lt;/code&gt;) except that order is important in the positional intersection.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cheese ~&amp;gt; cake&lt;/code&gt; will match &lt;code&gt;&amp;quot;cheese and cake&amp;quot;&lt;/code&gt; but not &lt;code&gt;&amp;quot;cake and cheese&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;following-&#34;&gt;Following (&lt;code&gt;&amp;gt;&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Same as Near Following (&lt;code&gt;~&amp;gt;&lt;/code&gt;) except there are no constraints on how far apart the words can be.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cheese &amp;gt; cake&lt;/code&gt; will match any text where &lt;code&gt;&amp;quot;cheese&amp;quot;&lt;/code&gt; precedes &lt;code&gt;&amp;quot;cake&amp;quot;&lt;/code&gt; in a given field.&lt;/p&gt;
&lt;h2 id=&#34;score-boosting&#34;&gt;Score boosting&lt;/h2&gt;
&lt;p&gt;Wildcard, fuzzy match and exact match search terms can have their resulting scores boosted by adding &lt;code&gt;^n&lt;/code&gt; after them. For example, &lt;code&gt;wild^2&lt;/code&gt; will boost matches of &amp;ldquo;wild&amp;rdquo; by 2x.&lt;/p&gt;
&lt;h2 id=&#34;escaping-search-text&#34;&gt;Escaping search text&lt;/h2&gt;
&lt;p&gt;Use a backslash &lt;code&gt;\&lt;/code&gt; when you want to explicitly search for a character that clashes with the query syntax. For example, &lt;code&gt;A\=B&lt;/code&gt; will search for a single token containing
exactly &amp;ldquo;A=B&amp;rdquo;, rather than attempting to perform a field restricted search.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Query execution</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/query-execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/query-execution/</guid>
      <description>
        
        
        &lt;p&gt;LIFTI&amp;rsquo;s query execution logic employs a strategic approach to optimize query performance, prioritizing the execution of query parts based on their calculated weights.
This weight represents the relative cost and effectiveness of executing a particular query part in relation to the overall document set. By assigning these weights,
LIFTI aims to minimize the number of documents involved early in the query execution, thereby reducing the computational load and improving efficiency.&lt;/p&gt;
&lt;h3 id=&#34;scoring-mechanism-overview&#34;&gt;Scoring mechanism overview&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;General Principle&lt;/strong&gt;: Each query part is assigned a &amp;ldquo;weight&amp;rdquo; based on its expected execution cost and the number of documents it is likely to involve.
The objective is to execute less costly parts first, reducing the document set size early in the process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weighting Calculations for Different Query Parts&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ExactWordQueryPart&lt;/strong&gt;: Uses inverse document count. Weight = &lt;code&gt;Matching Document Count / Total Document Count&lt;/code&gt;. Lower weights will result for words bringing in fewer documents.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WildcardQueryPart&lt;/strong&gt;: A complex calculation involving the count of text matches, multi-character, and single-character wildcard matches, with different multipliers. Weight is reduced if the first query part is a text match, and increased it it has a leading multi-character match.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FuzzyMatchQueryPart&lt;/strong&gt;: Based on the ExactWordQueryPart&amp;rsquo;s weighting, adding a factor for the number of edits allowed. Weight increases with more permissible edits.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AdjacentWordsQueryPart&lt;/strong&gt;: Assumes the score of the first part of the query, adjusted by the inverse of the number of parts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intersection Query Parts&lt;/strong&gt; (AndQueryPart, PrecedingNearQueryPart, NearQueryPart, PrecedingQueryPart): Promotes parts based on the lowest scoring part of the intersection, encouraging execution of the cheapest part first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OrQueryOperator&lt;/strong&gt;: A union operation always requires both sides to be evaluated, so weight = &lt;code&gt;Left Score + Right Score&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FieldFilterQueryOperator&lt;/strong&gt;: Applies additional filtering, thus promoted. Weight = &lt;code&gt;Child Part Score * 0.5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BracketedQueryPart&lt;/strong&gt;: Reflects the score of the child part.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;execution-strategy&#34;&gt;Execution strategy&lt;/h3&gt;
&lt;p&gt;The execution order is determined by these weightings, with lower weights prioritized. This approach ensures that the query processor can efficiently
filter and score documents, avoiding unnecessary computations on documents that would later be excluded. This system is especially beneficial in queries with multiple parts,
where early reduction in document set size can lead to significant performance improvements.&lt;/p&gt;
&lt;h3 id=&#34;execution-plans&#34;&gt;Execution plans&lt;/h3&gt;
&lt;p&gt;To get more insight into how a query is executed, including the weighting scores that were calculated you can get LIFTI to generate the actual execution plan for a query.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Execute the query, indicating that timings and other details should be included&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;results&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Search&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;find something&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;QueryExecutionOptions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IncludeExecutionPlan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Calculate and return the execution plan details&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;actualExecutionPlan&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;results&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GetExecutionPlan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/understanding-query-plan/&#34;&gt;Understanding LIFTI query execution plans&lt;/a&gt; for more details.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Fuzzy Matching</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/fuzzy-matching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/fuzzy-matching/</guid>
      <description>
        
        
        &lt;p&gt;Fuzzy matches can be explicitly searched for using the &lt;a href=&#34;../lifti-query-syntax/#fuzzy-match-&#34;&gt;LIFTI query syntax&lt;/a&gt;, or implied as the default for searches by
&lt;a href=&#34;../../index-construction/withqueryparser/#configuring-the-default-lifti-queryparser&#34;&gt;configuring the index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;LIFTI uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Levenshtein_distance&#34;&gt;Levenshtein distance&lt;/a&gt; to perform fuzzy matches between a search term and tokens in the index.
The distance between two words is the number of edits that are required to match them, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insertions: fid would match fi&lt;strong&gt;n&lt;/strong&gt;d&lt;/li&gt;
&lt;li&gt;deletions: foood would match food&lt;/li&gt;
&lt;li&gt;substitutions: frnd would match f&lt;strong&gt;i&lt;/strong&gt;nd&lt;/li&gt;
&lt;li&gt;transpositions: fnid would match f&lt;strong&gt;in&lt;/strong&gt;d - Transpositions are a special case, because although two characters are affected, it is considered a single edit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The resulting Levenshtein distance between any matched term and the search term is used to reduce the score of the match. This means that documents containing
words that are closer matches will typically be surfaced higher up in the search results.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;To prevent a &lt;a href=&#34;https://en.wikipedia.org/wiki/Combinatorial_explosion&#34;&gt;combinatorial explosion&lt;/a&gt; of potential matches, LIFTI provides two control mechanisms for fuzzy matching:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Maximum number of edits&lt;/strong&gt; - the total number of edits that can be used in any potential match. The default for this value is calculated as &lt;code&gt;search term length/2&lt;/code&gt; which allows for a larger number of
edits for longer search terms. Search terms of just a single character will not allow any edits, as the resulting value will be zero (the formula is an integer calculation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximum number of sequential edits&lt;/strong&gt; - the maximum number of edits that can be found sequentially in any potential match. The default for this value is calculated as &lt;code&gt;max(1, search term length/4)&lt;/code&gt;. This
default allows for a growing number of sequential edits, however this will never drop below a value of one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When providing your own overrides for these calculations, be aware that if your configuration for either  results in a value of zero, then the fuzzy match will become an exact match, as no edits will be allowed.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;With a max edits of &lt;strong&gt;3&lt;/strong&gt; and max sequential edits of &lt;strong&gt;1&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feed&lt;/strong&gt; will &lt;em&gt;not&lt;/em&gt; match &lt;strong&gt;food&lt;/strong&gt; because it requires two sequential edits&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redy&lt;/strong&gt; will &lt;em&gt;not&lt;/em&gt; match &lt;strong&gt;friendly&lt;/strong&gt; because it requires 4 insertions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Default values can be &lt;a href=&#34;../../index-construction/withqueryparser/#queryparserbuilder-options&#34;&gt;configured at the index level&lt;/a&gt;, and can either be expressed as a static value,
or a value calculated from the length of the search term.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Simple Queries</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/simple-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/simple-queries/</guid>
      <description>
        
        
        &lt;p&gt;When you have &lt;a href=&#34;../../index-construction/withsimplequeryparser&#34;&gt;configured an index to use the simple query parser&lt;/a&gt; you can no longer
make use of the full LIFTI query syntax in your queries, however you can still configure the simple query parser to treat all search
terms as &lt;a href=&#34;../fuzzy-matching&#34;&gt;fuzzy matches&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Search terms are simply combined together with &lt;code&gt;and&lt;/code&gt;s or &lt;code&gt;or&lt;/code&gt;s, depending on your configuration, and punctuation is stripped out as per your
index tokenization rules.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Manually Constructing Queries</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/manually-constructing-queries/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/manually-constructing-queries/</guid>
      <description>
        
        
        &lt;p&gt;There are two approaches you can take to constructing a &lt;code&gt;Query&lt;/code&gt;, using the fluent builder syntax and manually creating the relevant query parts.&lt;/p&gt;
&lt;p&gt;The simplest is the fluent builder syntax as it takes care of automatically normalizing your search text to be in line with that expected in the index.&lt;/p&gt;
&lt;h2 id=&#34;fluent-query-building&#34;&gt;Fluent query building&lt;/h2&gt;
&lt;p&gt;All fluent query building starts from the index:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can immediately execute a built query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;searchResults&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or just build an &lt;code&gt;IQuery&lt;/code&gt; representing it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can exact match a search term, as in the above examples, fuzzy match or wildcard match:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Fuzzy match&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;searchResults&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FuzzyMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Wildcard match, parsing from text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;searchResults&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WildcardMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;te%*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Wildcard match, building explicitly&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;searchResults&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WildcardMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Text&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;te&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SingleCharacter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MultipleCharacters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;fluently-combining-search-terms&#34;&gt;Fluently combining search terms&lt;/h3&gt;
&lt;p&gt;Terms can be combined with and (&lt;code&gt;&amp;amp;&lt;/code&gt;)/or (&lt;code&gt;|&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Combine with And (&amp;amp;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;And&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Combine with Or (|)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Or&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All other &lt;a href=&#34;../lifti-query-syntax&#34;&gt;LIFTI query operators&lt;/a&gt; are also supported:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Combine with Preceding (&amp;gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Preceding&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Combine with Near (~)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Near&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Combine with Preceding Near (~&amp;gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CloselyPreceding&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;adjacent-words&#34;&gt;Adjacent words&lt;/h3&gt;
&lt;p&gt;You can build a series of search terms that must follow each other sequentially (i.e. &amp;ldquo;one two three&amp;rdquo;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Adjacent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within an adjacent search you can also use fuzzy match or wildcard searches as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Adjacent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FuzzyMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wst&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WildcardMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wi*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;searching-in-a-specific-field&#34;&gt;Searching in a specific field&lt;/h3&gt;
&lt;p&gt;Like in the LIFTI query syntax to restrict a search to a specific field (e.g. &lt;code&gt;[fieldName]=text&lt;/code&gt;) you can do the same fluently:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;InField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FuzzyMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Multiple search terms in an &lt;code&gt;InField&lt;/code&gt; call will automatically be placed in parenthesis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;InField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;west&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Or&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;());&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// [description]=(west | wing)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bracketing-parts-of-the-query&#34;&gt;Bracketing parts of the query&lt;/h3&gt;
&lt;p&gt;To logically group a section of a query together you can place them in a bracketed section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Bracketed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;And&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExactMatch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ToString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;());&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// one | (two &amp;amp; three)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;manual-query-construction&#34;&gt;Manual query construction&lt;/h2&gt;
&lt;p&gt;You can manually construct a &lt;code&gt;Query&lt;/code&gt; using any combination of &lt;code&gt;IQueryPart&lt;/code&gt;s, but take care to normalize any text to match in the same way that it has been indexed. You can do this using either the &lt;code&gt;IIndexTokenizer&lt;/code&gt; for the index, or if specific tokenization rules have been &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/index-construction/withobjecttokenization/&#34;&gt;configured for a field&lt;/a&gt;, then the tokenizer for that field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;tokenizer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DefaultTokenizer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AndQueryOperator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ExactWordQueryPart&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tokenizer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Normalize&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ExactWordQueryPart&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tokenizer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Normalize&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;IQueryPart&lt;/code&gt;s come in two flavors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Operators - these contain other &lt;code&gt;IQueryParts&lt;/code&gt;, combining the results that they return according to certain rules, e.g. &lt;code&gt;AndQueryPart&lt;/code&gt; and &lt;code&gt;OrQueryPart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Textual - these work the &lt;a href=&#34;../using-the-index-navigator/&#34;&gt;&lt;code&gt;IIndexNavigator&lt;/code&gt;&lt;/a&gt; to query the index for matches appropriate to them, e.g. &lt;code&gt;ExactWordQueryPart&lt;/code&gt;, &lt;code&gt;FuzzyMatchQueryPart&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;textual-query-parts&#34;&gt;Textual query parts&lt;/h3&gt;
&lt;h4 id=&#34;exactwordquerypartstring-word&#34;&gt;ExactWordQueryPart(string word)&lt;/h4&gt;
&lt;p&gt;Searches the index for words that exactly match &lt;code&gt;word&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;fuzzymatchquerypartstring-word-ushort-maxeditdistance--4-ushort-maxsequentialedits--1&#34;&gt;FuzzyMatchQueryPart(string word, ushort maxEditDistance = 4, ushort maxSequentialEdits = 1)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Performs a &lt;a href=&#34;../lifti-query-syntax#fuzzy-match-&#34;&gt;fuzzy match&lt;/a&gt; against the index.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;maxEditDistance&lt;/code&gt;: The maximum of edits allowed for any given match. The higher this value, the more divergent matches will be.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxSequentialEdits&lt;/code&gt; The maximum number of edits that are allowed to appear sequentially. By default this is 1, which forces matches to be more similar to the search criteria&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;wildcardquerypartireadonlylistltwildcardqueryfragmentgt-fragments&#34;&gt;WildcardQueryPart(IReadOnlyList&amp;lt;WildcardQueryFragment&amp;gt; fragments)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;code&gt;WildcardQueryPart&lt;/code&gt; consists of multiple &lt;code&gt;WildcardQueryFragment&lt;/code&gt;s that are processed sequentially to match tokens in the index. They can be constructed using the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WildcardQueryFragment.MultiCharacter()&lt;/code&gt; - matches zero or more characters in the index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WildcardQueryFragment.SingleCharacter()&lt;/code&gt; - matches any single character in the index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WildcardQueryFragment.CreateText(string text)&lt;/code&gt; - exact matches a fragment of text at whatever point has been reached in the index.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;wildcard&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;WildcardQueryPart&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;WildcardQueryFragment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SingleCharacter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;WildcardQueryFragment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SingleCharacter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;WildcardQueryFragment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CreateText&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Would translate to the LIFTI query &lt;code&gt;%%d&lt;/code&gt;, matching any words that start with any two letters followed by a &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;structural-query-parts&#34;&gt;Structural query parts&lt;/h3&gt;
&lt;h4 id=&#34;andqueryoperatoriquerypart-left-iquerypart-right&#34;&gt;&lt;code&gt;AndQueryOperator(IQueryPart left, IQueryPart right)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Intersects the results of two query parts. In other words, only matches that appear on &lt;strong&gt;both&lt;/strong&gt; sides will be returned.&lt;/p&gt;
&lt;h4 id=&#34;orqueryoperatoriquerypart-left-iquerypart-right&#34;&gt;&lt;code&gt;OrQueryOperator(IQueryPart left, IQueryPart right)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unions the results of two query parts. In other words, a deduplicated set of matches on &lt;strong&gt;both&lt;/strong&gt; sides will be returned.&lt;/p&gt;
&lt;h4 id=&#34;bracketedquerypartiquerypart-statement&#34;&gt;&lt;code&gt;BracketedQueryPart(IQueryPart statement)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be used to group other query parts together, ensure they are executed in the right order.&lt;/p&gt;
&lt;h4 id=&#34;adjacentwordsquerypartireadonlylistiquerypart-matches&#34;&gt;&lt;code&gt;AdjacentWordsQueryPart(IReadOnlyList&amp;lt;IQueryPart&amp;gt; matches)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A query part requiring that a series of matches must appear in a document in sequence.&lt;/p&gt;
&lt;h4 id=&#34;fieldfilterqueryoperatorstring-fieldname-byte-fieldid-iquerypart-statement&#34;&gt;&lt;code&gt;FieldFilterQueryOperator(string fieldName, byte fieldId, IQueryPart statement)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;field=&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Restricts the resulting document matches to only those that include matching tokens in a specific field.&lt;/p&gt;
&lt;h4 id=&#34;nearqueryoperatoriquerypart-left-iquerypart-right-int-tolerance--5&#34;&gt;&lt;code&gt;NearQueryOperator(IQueryPart left, IQueryPart right, int tolerance = 5)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;~n&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Produces an intersection of two &lt;code&gt;IQueryPart&lt;/code&gt;s, restricting an document&amp;rsquo;s field matches such that the locations are close to one another.&lt;/p&gt;
&lt;p&gt;Documents that result in no field matches are filtered out.&lt;/p&gt;
&lt;h4 id=&#34;precedingnearqueryoperatoriquerypart-left-iquerypart-right-int-tolerance--5&#34;&gt;&lt;code&gt;PrecedingNearQueryOperator(IQueryPart left, IQueryPart right, int tolerance = 5)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;~n&amp;gt;&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Produces an intersection of two &lt;code&gt;IQueryPart&lt;/code&gt;s, restricting an document&amp;rsquo;s field matches such that the locations of the first appear before the locations of the second and within a specified tolerance.&lt;/p&gt;
&lt;p&gt;Documents that result in no field matches are filtered out.&lt;/p&gt;
&lt;h4 id=&#34;precedingqueryoperatoriquerypart-left-iquerypart-right&#34;&gt;&lt;code&gt;PrecedingQueryOperator(IQueryPart left, IQueryPart right)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; in LIFTI query syntax&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Produces an intersection of two &lt;code&gt;IQueryPart&lt;/code&gt;s, restricting an document&amp;rsquo;s field matches such that the locations of the first appear before the locations of the second.&lt;/p&gt;
&lt;p&gt;Documents that result in no field matches are filtered out.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Field Information</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/field-information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/field-information/</guid>
      <description>
        
        
        &lt;p&gt;A &lt;code&gt;FullTextIndex&lt;/code&gt; class exposes a &lt;code&gt;FieldLookup&lt;/code&gt; property of type &lt;code&gt;IIndexedFieldLookup&lt;/code&gt; that can be used to query the index for
information about the fields that have been indexed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IIndexedFieldLookup&lt;/code&gt; exposes the following methods:&lt;/p&gt;
&lt;h2 id=&#34;defaultfield&#34;&gt;&lt;code&gt;DefaultField&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The id of the default field used when an &lt;code&gt;IFullTextIndex{T}.AddAsync(T, string, System.Threading.CancellationToken)&lt;/code&gt; overload has been used, as opposed to indexing text read from properties of object.&lt;/p&gt;
&lt;h2 id=&#34;getfieldforidbyte-id&#34;&gt;&lt;code&gt;GetFieldForId(byte id)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Gets the configured name for a field id.&lt;/p&gt;
&lt;h2 id=&#34;getfieldinfostring-fieldname&#34;&gt;&lt;code&gt;GetFieldInfo(string fieldName)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Gets the configuration required for indexing a named field, including the &lt;code&gt;Tokenization.TextExtraction.ITextExtractor&lt;/code&gt; and &lt;code&gt;Tokenization.IIndexTokenizer&lt;/code&gt; instances to use when processing the field&amp;rsquo;s text.&lt;/p&gt;
&lt;h3 id=&#34;indexedfielddetails&#34;&gt;&lt;code&gt;IndexedFieldDetails&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This abstract class contains information about a field that has been configured for indexing.&lt;/p&gt;
&lt;h4 id=&#34;properties&#34;&gt;Properties&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Id&lt;/strong&gt;: Gets the id of the field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: Gets the name of the field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ObjectType&lt;/strong&gt;: Gets the type of the object the field is registered for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FieldKind&lt;/strong&gt;: Gets the kind of field this instance represents, either &lt;code&gt;FieldKind.Static&lt;/code&gt; or &lt;code&gt;FieldKind.Dynamic&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TextExtractor&lt;/strong&gt;: Gets the &lt;code&gt;ITextExtractor&lt;/code&gt; used to extract sections of text from this field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tokenizer&lt;/strong&gt;: Gets the &lt;code&gt;IIndexTokenizer&lt;/code&gt; that should be used when tokenizing text for the field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Thesaurus&lt;/strong&gt;: Gets the &lt;code&gt;IThesaurus&lt;/code&gt; that should be used to expand tokens when processing text for this field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DynamicFieldReaderName&lt;/strong&gt;: Gets the name of the dynamic field reader that generated this field. If this field is not a dynamic field, this will be &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;methods&#34;&gt;Methods&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ReadAsync(object item, CancellationToken cancellationToken)&lt;/strong&gt;: Reads the text for the field from the specified object. The object must be of the type specified by the &lt;code&gt;ObjectType&lt;/code&gt; property.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;isknownfieldtype-objecttype-string-fieldname&#34;&gt;&lt;code&gt;IsKnownField(Type objectType, string fieldName)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if the given field name is known to the index and associated to the given object type, whether statically defined at index creation, or dynamically registered during indexing.&lt;/p&gt;
&lt;h2 id=&#34;allfieldnames&#34;&gt;&lt;code&gt;AllFieldNames&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Gets the names of all fields configured in the index, including any dynamic fields that have been registered during the indexing of objects.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: IndexNavigator</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/using-the-index-navigator/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/using-the-index-navigator/</guid>
      <description>
        
        
        &lt;p&gt;When processing a search query, LIFTI leverages a class called &lt;code&gt;IndexNavigator&lt;/code&gt; which allows for a character-by-character
navigation of the index.&lt;/p&gt;
&lt;p&gt;You can use an &lt;code&gt;IndexNavigator&lt;/code&gt; to do the same thing yourself. The example below demonstrates the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IIndexNavigator.Process&lt;/code&gt; Navigates (forward only) the nodes in the index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IIndexNavigator.GetExactMatches&lt;/code&gt; Gets all the matches at the current location in the index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IIndexNavigator.GetExactAndChildMatches&lt;/code&gt; Gets the exact matches &lt;em&gt;and&lt;/em&gt; any matches in subsequent child nodes. This is the equivalent to a wildcard search.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IIndexNavigator.EnumerateIndexedTokens&lt;/code&gt; Enumerates the words (tokens) that were indexed under the current location. This essentaially allows for a reverse-engineering of words stored in the index, albeit in their index normalized form.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Task&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RunAsync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Create a full text index with default settings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;FullTextIndexBuilder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Index some sample data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddAsync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Item1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Catastrophe&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddAsync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Item2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Casualty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddAsync&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Item3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Cat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// To programatically search the index, create an index navigator instance &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// from the index snapshot.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CreateNavigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Navigate through the letters &amp;#39;C&amp;#39; and &amp;#39;A&amp;#39; (these will be the characters in their &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// *index normalized* form)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;CA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AsSpan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// There will be no exact matches at the current position in the index, but 3 matches &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// when considering child matches, i.e. words starting with &amp;#34;ca&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Writes: Exact matches: 0 Exact and child matches: 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;WriteMatchState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Navigating through the &amp;#39;T&amp;#39; of Catastrophe and Cat, but not Casualty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Writes: Exact matches: 1 Exact and child matches: 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;WriteMatchState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Use EnumerateIndexedTokens to reverse-engineer the words that have been indexed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// under the current location in the index, in their normalized form.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Writes:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// CAT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// CATASTROPHE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EnumerateIndexedTokens&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#000&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;token&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// The Process method returns true if navigation was successful, and false otherwise:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Writes: True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Writes: False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ZOOOOM&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;WriteMatchState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IIndexNavigator&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;navigator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;Console&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;WriteLine&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;$@&amp;#34;Exact matches: {navigator.GetExactMatches().Matches.Count} 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;Exact and child matches: {navigator.GetExactAndChildMatches().Matches.Count}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Understanding Query Execution Plans</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/understanding-query-plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/understanding-query-plan/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;QueryExecutionPlan&lt;/code&gt; class represents the execution strategy for a given query. It includes information about the sequence of operations, their timings, and the number of documents affected at each stage of the query.&lt;/p&gt;
&lt;h2 id=&#34;query-execution-plan-nodes&#34;&gt;Query execution plan nodes&lt;/h2&gt;
&lt;h3 id=&#34;node-properties&#34;&gt;Node properties&lt;/h3&gt;
&lt;p&gt;The execution plan is structured as a tree of &lt;code&gt;QueryExecutionPlanNode&lt;/code&gt; instances, each representing a part of the query execution process. Each &lt;code&gt;QueryExecutionPlanNode&lt;/code&gt; includes details about its part of the query execution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ExecutionOrder&lt;/strong&gt;: The sequence number of the node within the execution plan.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kind&lt;/strong&gt;: The type of operation performed at the node - see the examples below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ResultingDocumentCount&lt;/strong&gt;: The number of documents returned by this part of the query.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weighting&lt;/strong&gt;: The weighting score calculated for this part of the query. If the execution of the query didn&amp;rsquo;t necessitate the score to be calculated, this will be null.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DocumentFiltersApplied&lt;/strong&gt;: The number of document filters applied at this stage. This will be non-null if the results from a preceding evaluation can be used to pre-filter
the results at this node, mitigating the need for scoring matches that will just be discarded in a subsequent node.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FieldFiltersApplied&lt;/strong&gt;: The number of field filters applied.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text&lt;/strong&gt;: A textual representation of the node, providing insight into the specific operation or query part.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;InclusiveTiming&lt;/strong&gt;: The total time taken by this node and its children.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ExclusiveTiming&lt;/strong&gt;: The time taken by this node, excluding its children.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Children&lt;/strong&gt;: Child nodes of this node, representing subsequent operations in the query execution process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;node-kinds&#34;&gt;Node kinds&lt;/h3&gt;
&lt;h4 id=&#34;querypart&#34;&gt;QueryPart&lt;/h4&gt;
&lt;p&gt;Represents a textual query that was evaluated against the index. The text of the node will contain the query.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;8 documents returned for the query &amp;ldquo;?2,2?CRITICAL&amp;rdquo; in 16.4ms&#34; src=&#34;../../../images//QueryPlanImages/QueryPart.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;union&#34;&gt;Union&lt;/h4&gt;
&lt;p&gt;Typically introduced by an OR (|) operator. Results from the child nodes are combined into one set. Where documents are present in both nodes, their field matches are combined.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Union between two searches, &amp;ldquo;CRITICAL&amp;rdquo; returning 5 documents and &amp;ldquo;HIT&amp;rdquo; returning 1. Union results in 6 documents total&#34; src=&#34;../../../images//QueryPlanImages/Union.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;intersect&#34;&gt;Intersect&lt;/h4&gt;
&lt;p&gt;Typically introduced by an AND (&amp;amp;) operator. Only document results that are present in both child nodes are returned. Field matches for the intersected documents are combined.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Intersection between two searches, &amp;ldquo;ANIMAL&amp;rdquo; (3 documents) and &amp;ldquo;SPECIES&amp;rdquo; (1 document). Intersection results in only 1 matching document&#34; src=&#34;../../../images//QueryPlanImages/Intersect.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note the 3 document filters applied to the second search (SPECIES) - these are the 3 documents that were returned from the first search (ANIMAL). Without those document filters applied, searching for SPECIES would have returned many more documents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;positionalintersect&#34;&gt;PositionalIntersect&lt;/h4&gt;
&lt;p&gt;Introduced by the near (&lt;del&gt;), preceding near (&lt;/del&gt;&amp;gt;) and adjacent words (&amp;quot;&amp;quot;) operators. Like &lt;code&gt;Intersect&lt;/code&gt;, but the locations of the matched tokens are taken into
consideration and combined into a composite matched location which allows for the results of multiple positional matches to be combined in sequence.
Intersected documents that have no appropriate tokens matching are filtered out.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; src=&#34;../../../images//QueryPlanImages/PositionalIntersect.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;precedingintersect&#34;&gt;PrecedingIntersect&lt;/h4&gt;
&lt;p&gt;Introduced by the preceding (&amp;gt;) operator. Intersects matched documents but only where the matched tokens in the left node precede those in the right node.
Intersected documents that have no appropriate tokens matching are filtered out.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;alt text&#34; src=&#34;../../../images//QueryPlanImages/PrecedingIntersect.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;resultsonly&#34;&gt;ResultsOnly&lt;/h4&gt;
&lt;p&gt;A placeholder node representing the final query results without a specific operation. This will only ever appear if the index
was queried without the &lt;code&gt;QueryExecutionOptions.IncludeExecutionPlan&lt;/code&gt; option specified.&lt;/p&gt;
&lt;h2 id=&#34;usage-example&#34;&gt;Usage Example&lt;/h2&gt;
&lt;p&gt;To analyze a query execution plan, start with the &lt;code&gt;Root&lt;/code&gt; node and explore its properties and children. This allows you to trace the execution path, understand the impact of each operation, and identify potential areas for optimization.&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;600&#34; src=&#34;https://dotnetfiddle.net/Widget/slhurS&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The &lt;a href=&#34;../../../blazor-sample/&#34;&gt;Blazor sample&lt;/a&gt; provides a way to visualize the query execution plan:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Visualization of a query execution plan&#34; src=&#34;../../../images/query-execution-plan.png&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Search Results</title>
      <link>https://mikegoatly.github.io/lifti/docs/searching/search-results/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mikegoatly.github.io/lifti/docs/searching/search-results/</guid>
      <description>
        
        
        &lt;h2 id=&#34;search-result-order&#34;&gt;Search result order&lt;/h2&gt;
&lt;p&gt;Search results are returned sorted according to the total document score, in descending order. See &lt;a href=&#34;https://mikegoatly.github.io/lifti/lifti/docs/searching/search-results/scoring/&#34;&gt;scoring&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;searchresultlttkeygt&#34;&gt;&lt;code&gt;SearchResult&amp;amp;lt;TKey&amp;amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;tkey-key--get-&#34;&gt;&lt;code&gt;TKey Key { get; }&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The key for the document that matched the search criteria.&lt;/p&gt;
&lt;h3 id=&#34;ireadonlylistltfieldsearchresultgt-fieldmatches--get-&#34;&gt;&lt;code&gt;IReadOnlyList&amp;amp;lt;FieldSearchResult&amp;amp;gt; FieldMatches { get; }&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The fields that were matched for the document. Each of these is scored independently and provides detailed information
about the location of the words that were matched.&lt;/p&gt;
&lt;h3 id=&#34;double-score--get-&#34;&gt;&lt;code&gt;double Score { get; }&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The overall score for this match. This is a sum of the scores for this instance&amp;rsquo;s FieldMatches.&lt;/p&gt;
&lt;h2 id=&#34;fieldsearchresult&#34;&gt;&lt;code&gt;FieldSearchResult&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;string-foundin--get-&#34;&gt;&lt;code&gt;string FoundIn { get; }&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The name of the field that the search results were found in. This will be one of the field names configured when the index was built, or &lt;code&gt;Unspecified&lt;/code&gt; if no fields were configured.&lt;/p&gt;
&lt;h3 id=&#34;double-score--get--1&#34;&gt;&lt;code&gt;double Score { get; }&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The score for this particular field.&lt;/p&gt;
&lt;h3 id=&#34;ireadonlylistlttokenlocationgt-locations--get-&#34;&gt;&lt;code&gt;IReadOnlyList&amp;amp;lt;TokenLocation&amp;amp;gt; Locations { get; }&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;TokenLocation&lt;/code&gt; instances for the locations of the matched tokens in the field.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
