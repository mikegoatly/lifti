abstract Lifti.Querying.QueryParts.BinaryQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
abstract Lifti.Querying.QueryParts.ScoreBoostedQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
abstract Lifti.Querying.QueryParts.ScoreBoostedQueryPart.RunWeightingCalculation(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
abstract Lifti.Serialization.IndexDeserializerBase<TKey>.DeserializeDocumentMetadataAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Lifti.Serialization.DocumentMetadataCollector<TKey>!>
abstract Lifti.Serialization.IndexDeserializerBase<TKey>.DeserializeIndexNodeHierarchyAsync(Lifti.Serialization.SerializedFieldIdMap serializedFieldIdMap, Lifti.IIndexNodeFactory! indexNodeFactory, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Lifti.IndexNode!>
abstract Lifti.Serialization.IndexDeserializerBase<TKey>.DeserializeKnownFieldsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Lifti.Serialization.SerializedFieldCollector!>
abstract Lifti.Serialization.IndexSerializerBase<TKey>.WriteFieldsAsync(System.Collections.Generic.IReadOnlyList<Lifti.Serialization.SerializedFieldInfo>! fields, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
abstract Lifti.Serialization.IndexSerializerBase<TKey>.WriteIndexMetadataAsync(Lifti.IIndexSnapshot<TKey>! index, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
abstract Lifti.Serialization.IndexSerializerBase<TKey>.WriteNodesAsync(Lifti.IndexNode! rootNode, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Lifti.ChildNodeMap
Lifti.ChildNodeMap.CharacterMap.get -> System.Collections.Generic.IReadOnlyList<Lifti.ChildNodeMapEntry>!
Lifti.ChildNodeMap.ChildNodeMap() -> void
Lifti.ChildNodeMap.ChildNodeMap(Lifti.ChildNodeMapEntry[]! map) -> void
Lifti.ChildNodeMap.Count.get -> int
Lifti.ChildNodeMap.Equals(Lifti.ChildNodeMap other) -> bool
Lifti.ChildNodeMap.TryGetValue(char value, out Lifti.IndexNode? nextNode) -> bool
Lifti.ChildNodeMapEntry
Lifti.ChildNodeMapEntry.ChildChar.get -> char
Lifti.ChildNodeMapEntry.ChildChar.set -> void
Lifti.ChildNodeMapEntry.ChildNode.get -> Lifti.IndexNode!
Lifti.ChildNodeMapEntry.ChildNode.set -> void
Lifti.ChildNodeMapEntry.ChildNodeMapEntry() -> void
Lifti.ChildNodeMapEntry.ChildNodeMapEntry(char ChildChar, Lifti.IndexNode! ChildNode) -> void
Lifti.DocumentMetadata
Lifti.DocumentMetadata.DocumentMetadata(byte? objectTypeId, int documentId, Lifti.DocumentStatistics documentStatistics, System.DateTime? scoringFreshnessDate, double? scoringMagnitude) -> void
Lifti.DocumentMetadata.DocumentStatistics.get -> Lifti.DocumentStatistics
Lifti.DocumentMetadata.Id.get -> int
Lifti.DocumentMetadata.ObjectTypeId.get -> byte?
Lifti.DocumentMetadata.ScoringFreshnessDate.get -> System.DateTime?
Lifti.DocumentMetadata.ScoringMagnitude.get -> double?
Lifti.DocumentMetadata<TKey>
Lifti.DocumentMetadata<TKey>.Item.get -> TKey
Lifti.DocumentMetadata<TKey>.Key.get -> TKey
Lifti.DocumentPhrases<TKey, TObject>
Lifti.DocumentPhrases<TKey, TObject>.DocumentPhrases(TObject item, Lifti.SearchResult<TKey>! SearchResult, System.Collections.Generic.IReadOnlyList<Lifti.FieldPhrases<TKey>!>! phrases) -> void
Lifti.DocumentPhrases<TKey, TObject>.Item.get -> TObject
Lifti.DocumentPhrases<TKey, TObject>.Item.init -> void
Lifti.DocumentPhrases<TKey>
Lifti.DocumentPhrases<TKey>.DocumentPhrases(Lifti.SearchResult<TKey>! SearchResult, System.Collections.Generic.IReadOnlyList<Lifti.FieldPhrases<TKey>!>! FieldPhrases) -> void
Lifti.DocumentPhrases<TKey>.EnumeratePhrases() -> System.Collections.Generic.IEnumerable<string!>!
Lifti.DocumentPhrases<TKey>.FieldPhrases.get -> System.Collections.Generic.IReadOnlyList<Lifti.FieldPhrases<TKey>!>!
Lifti.DocumentPhrases<TKey>.FieldPhrases.init -> void
Lifti.DocumentPhrases<TKey>.SearchResult.get -> Lifti.SearchResult<TKey>!
Lifti.DocumentPhrases<TKey>.SearchResult.init -> void
Lifti.DocumentStatistics.DocumentStatistics() -> void
Lifti.DocumentStatistics.DocumentStatistics(System.Collections.Generic.IReadOnlyDictionary<byte, int>! tokenCountByField, int totalTokenCount) -> void
Lifti.DocumentTokenMatchMap
Lifti.DocumentTokenMatchMap.Count.get -> int
Lifti.DocumentTokenMatchMap.DocumentTokenMatchMap() -> void
Lifti.DocumentTokenMatchMap.DocumentTokenMatchMap(System.Collections.Generic.Dictionary<int, System.Collections.Generic.IReadOnlyList<Lifti.IndexedToken>!>! data) -> void
Lifti.DocumentTokenMatchMap.Enumerate() -> System.Collections.Generic.IEnumerable<(int documentId, System.Collections.Generic.IReadOnlyList<Lifti.IndexedToken>! indexedTokens)>!
Lifti.DocumentTokenMatchMap.Equals(Lifti.DocumentTokenMatchMap other) -> bool
Lifti.DocumentTokenMatchMap.HasDocument(int documentId) -> bool
Lifti.DocumentTokenMatchMap.TryGetValue(int documentId, out System.Collections.Generic.IReadOnlyList<Lifti.IndexedToken>? tokens) -> bool
Lifti.DuplicateKeyBehavior
Lifti.DuplicateKeyBehavior.Replace = 0 -> Lifti.DuplicateKeyBehavior
Lifti.DuplicateKeyBehavior.ThrowException = 1 -> Lifti.DuplicateKeyBehavior
Lifti.FieldSearchResult.FieldSearchResult(string! foundIn, double score, System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>! locations) -> void
Lifti.FieldSearchResult.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>!
Lifti.FullTextIndex<TKey>.AddAsync(TKey key, string! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.FullTextIndex<TKey>.AddAsync(TKey key, System.Collections.Generic.IEnumerable<string!>! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.FullTextIndex<TKey>.AddAsync<TObject>(TObject item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.FullTextIndex<TKey>.AddRangeAsync<TObject>(System.Collections.Generic.IEnumerable<TObject>! items, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.FullTextIndex<TKey>.Items.get -> Lifti.IIndexMetadata<TKey>!
Lifti.FullTextIndex<TKey>.Metadata.get -> Lifti.IIndexMetadata<TKey>!
Lifti.FullTextIndex<TKey>.RemoveAsync(TKey key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
Lifti.FullTextIndexBuilder<TKey>.WithDuplicateKeyBehavior(Lifti.DuplicateKeyBehavior duplicateKeyBehavior) -> Lifti.FullTextIndexBuilder<TKey>!
Lifti.FullTextIndexBuilder<TKey>.WithObjectTokenization<TObject>(System.Func<Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!, Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!>! optionsBuilder) -> Lifti.FullTextIndexBuilder<TKey>!
Lifti.IFullTextIndex<TKey>.AddAsync(TKey key, string! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.IFullTextIndex<TKey>.AddAsync(TKey key, System.Collections.Generic.IEnumerable<string!>! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.IFullTextIndex<TKey>.AddAsync<TObject>(TObject item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.IFullTextIndex<TKey>.AddRangeAsync<TObject>(System.Collections.Generic.IEnumerable<TObject>! items, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.IFullTextIndex<TKey>.Items.get -> Lifti.IIndexMetadata<TKey>!
Lifti.IFullTextIndex<TKey>.Metadata.get -> Lifti.IIndexMetadata<TKey>!
Lifti.IFullTextIndex<TKey>.RemoveAsync(TKey key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
Lifti.IIndexMetadata
Lifti.IIndexMetadata.Count.get -> int
Lifti.IIndexMetadata.DocumentCount.get -> int
Lifti.IIndexMetadata.GetDocumentMetadata(int documentId) -> Lifti.DocumentMetadata!
Lifti.IIndexMetadata.GetMetadata(int documentId) -> Lifti.DocumentMetadata!
Lifti.IIndexMetadata.GetObjectTypeScoreBoostMetadata(byte objectTypeId) -> Lifti.ScoreBoostMetadata!
Lifti.IIndexMetadata.IndexStatistics.get -> Lifti.IndexStatistics!
Lifti.IIndexMetadata<TKey>
Lifti.IIndexMetadata<TKey>.Contains(TKey key) -> bool
Lifti.IIndexMetadata<TKey>.GetDocumentMetadata(int documentId) -> Lifti.DocumentMetadata<TKey>!
Lifti.IIndexMetadata<TKey>.GetIndexedDocuments() -> System.Collections.Generic.IEnumerable<Lifti.DocumentMetadata<TKey>!>!
Lifti.IIndexMetadata<TKey>.GetMetadata(int documentId) -> Lifti.DocumentMetadata<TKey>!
Lifti.IIndexMetadata<TKey>.GetMetadata(TKey key) -> Lifti.DocumentMetadata<TKey>!
Lifti.IIndexNodeFactory.CreateNode(System.ReadOnlyMemory<char> intraNodeText, Lifti.ChildNodeMap childNodes, Lifti.DocumentTokenMatchMap matches) -> Lifti.IndexNode!
Lifti.IIndexSnapshot.Items.get -> Lifti.IIndexMetadata!
Lifti.IIndexSnapshot.Metadata.get -> Lifti.IIndexMetadata!
Lifti.IIndexSnapshot<TKey>.Items.get -> Lifti.IIndexMetadata<TKey>!
Lifti.IIndexSnapshot<TKey>.Metadata.get -> Lifti.IIndexMetadata<TKey>!
Lifti.IndexedFieldDetails.ScoreBoost.get -> double
Lifti.IndexedFieldDetails<TObject>
Lifti.IndexedToken.IndexedToken(byte fieldId, params Lifti.TokenLocation![]! locations) -> void
Lifti.IndexedToken.IndexedToken(byte fieldId, System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>! locations) -> void
Lifti.IndexedToken.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>!
Lifti.IndexMetadata<TKey>
Lifti.IndexMetadata<TKey>.Add(Lifti.DocumentMetadata<TKey>! documentMetadata) -> void
Lifti.IndexMetadata<TKey>.Add(TKey key, Lifti.DocumentStatistics documentStatistics) -> int
Lifti.IndexMetadata<TKey>.Contains(TKey key) -> bool
Lifti.IndexMetadata<TKey>.Count.get -> int
Lifti.IndexMetadata<TKey>.DocumentCount.get -> int
Lifti.IndexMetadata<TKey>.GetDocumentMetadata(int documentId) -> Lifti.DocumentMetadata<TKey>!
Lifti.IndexMetadata<TKey>.GetIndexedDocuments() -> System.Collections.Generic.IEnumerable<Lifti.DocumentMetadata<TKey>!>!
Lifti.IndexMetadata<TKey>.GetMetadata(int documentId) -> Lifti.DocumentMetadata<TKey>!
Lifti.IndexMetadata<TKey>.GetMetadata(TKey key) -> Lifti.DocumentMetadata<TKey>!
Lifti.IndexMetadata<TKey>.GetObjectTypeScoreBoostMetadata(byte objectTypeId) -> Lifti.ScoreBoostMetadata!
Lifti.IndexMetadata<TKey>.IndexStatistics.get -> Lifti.IndexStatistics!
Lifti.IndexNode.ChildNodes.get -> Lifti.ChildNodeMap
Lifti.IndexNode.Matches.get -> Lifti.DocumentTokenMatchMap
Lifti.IndexNodeFactory.CreateNode(System.ReadOnlyMemory<char> intraNodeText, Lifti.ChildNodeMap childNodes, Lifti.DocumentTokenMatchMap matches) -> Lifti.IndexNode!
Lifti.IndexOptions.DuplicateItemBehavior.get -> Lifti.DuplicateKeyBehavior
Lifti.IndexOptions.DuplicateKeyBehavior.get -> Lifti.DuplicateKeyBehavior
Lifti.IndexSnapshot<TKey>.Items.get -> Lifti.IIndexMetadata<TKey>!
Lifti.IndexSnapshot<TKey>.Metadata.get -> Lifti.IIndexMetadata<TKey>!
Lifti.IndexStatistics.GetFieldTokenCount(byte fieldId) -> long
Lifti.IndexStatistics.TokenCountByField.get -> System.Collections.Generic.IReadOnlyDictionary<byte, long>!
Lifti.ISearchResults<TKey>.CreateMatchPhrases(System.Func<TKey, string!>! loadText) -> System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync(System.Func<TKey, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<string!>>! loadTextAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey>!>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync(System.Func<TKey, System.Threading.Tasks.ValueTask<string!>>! loadTextAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey>!>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TObject>(System.Func<System.Collections.Generic.IReadOnlyList<TKey>!, System.Collections.Generic.IReadOnlyList<TObject>!>! loadItems, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey, TObject>!>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TObject>(System.Func<System.Collections.Generic.IReadOnlyList<TKey>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<TObject>!>>! loadItemsAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey, TObject>!>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TObject>(System.Func<System.Collections.Generic.IReadOnlyList<TKey>!, System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<TObject>!>>! loadItemsAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey, TObject>!>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TObject>(System.Func<TKey, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TObject>>! loadItemAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey, TObject>!>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TObject>(System.Func<TKey, System.Threading.Tasks.ValueTask<TObject>>! loadItemAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey, TObject>!>!>!
Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TObject>(System.Func<TKey, TObject>! loadItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.DocumentPhrases<TKey, TObject>!>!>!
Lifti.Querying.FieldScoreBoostProvider
Lifti.Querying.FieldScoreBoostProvider.FieldScoreBoostProvider(Lifti.IIndexedFieldLookup! fieldLookup) -> void
Lifti.Querying.FieldScoreBoostProvider.GetScoreBoost(byte fieldId) -> double
Lifti.Querying.IFieldScoreBoostProvider
Lifti.Querying.IFieldScoreBoostProvider.GetScoreBoost(byte fieldId) -> double
Lifti.Querying.IIndexNavigator.AddExactAndChildMatches(Lifti.Querying.QueryContext! queryContext, Lifti.Querying.Lifti.Querying.DocumentMatchCollector! documentMatchCollector, double weighting = 1) -> void
Lifti.Querying.IIndexNavigator.AddExactMatches(Lifti.Querying.QueryContext! queryContext, Lifti.Querying.Lifti.Querying.DocumentMatchCollector! documentMatchCollector, double weighting = 1) -> void
Lifti.Querying.IIndexNavigator.ExactMatchCount() -> int
Lifti.Querying.IIndexNavigator.GetExactAndChildMatches(Lifti.Querying.QueryContext! queryContext, double weighting = 1) -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.IIndexNavigator.GetExactMatches(Lifti.Querying.QueryContext! queryContext, double weighting = 1) -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.IIndexNavigator.Snapshot.get -> Lifti.IIndexSnapshot!
Lifti.Querying.IntermediateQueryResult.Equals(Lifti.Querying.IntermediateQueryResult other) -> bool
Lifti.Querying.IScorer.CalculateScore(int totalMatchedDocuments, int documentId, byte fieldId, System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>! tokenLocations, double weighting) -> double
Lifti.Querying.Lifti.Querying.DocumentMatchCollector
Lifti.Querying.Lifti.Querying.DocumentMatchCollector.DocumentMatchCollector() -> void
Lifti.Querying.Lifti.Querying.DocumentMatchCollector.ToIntermediateQueryResult() -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.QueryContext
Lifti.Querying.QueryContext.FilterToDocumentIds.get -> System.Collections.Generic.IReadOnlySet<int>?
Lifti.Querying.QueryContext.FilterToDocumentIds.init -> void
Lifti.Querying.QueryContext.FilterToFieldId.get -> byte?
Lifti.Querying.QueryContext.FilterToFieldId.init -> void
Lifti.Querying.QueryContext.QueryContext(byte? FilterToFieldId = null, System.Collections.Generic.IReadOnlySet<int>? FilterToDocumentIds = null) -> void
Lifti.Querying.QueryParts.AdjacentWordsQueryOperator.CalculateWeighting(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
Lifti.Querying.QueryParts.AdjacentWordsQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.QueryParts.BinaryQueryOperator.CalculateWeighting(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
Lifti.Querying.QueryParts.BinaryQueryOperator.EvaluateWithDocumentIntersection(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> (Lifti.Querying.IntermediateQueryResult leftResults, Lifti.Querying.IntermediateQueryResult rightResults)
Lifti.Querying.QueryParts.BracketedQueryPart.CalculateWeighting(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
Lifti.Querying.QueryParts.BracketedQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.QueryParts.EmptyQueryPart.CalculateWeighting(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
Lifti.Querying.QueryParts.EmptyQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.QueryParts.ExactWordQueryPart.ExactWordQueryPart(string! word, double? scoreBoost = null) -> void
Lifti.Querying.QueryParts.FieldFilterQueryOperator.CalculateWeighting(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
Lifti.Querying.QueryParts.FieldFilterQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.QueryParts.FuzzyMatchQueryPart.FuzzyMatchQueryPart(string! word, ushort maxEditDistance = 4, ushort maxSequentialEdits = 1, double? scoreBoost = null) -> void
Lifti.Querying.QueryParts.IQueryPart.CalculateWeighting(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
Lifti.Querying.QueryParts.IQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
Lifti.Querying.QueryParts.ScoreBoostedQueryPart
Lifti.Querying.QueryParts.ScoreBoostedQueryPart.CalculateWeighting(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
Lifti.Querying.QueryParts.ScoreBoostedQueryPart.ScoreBoost.get -> double?
Lifti.Querying.QueryParts.ScoreBoostedQueryPart.ScoreBoostedQueryPart(double? scoreBoost) -> void
Lifti.Querying.QueryParts.WildcardQueryPart.WildcardQueryPart(System.Collections.Generic.IEnumerable<Lifti.Querying.QueryParts.WildcardQueryFragment>! fragments, double? scoreBoost = null) -> void
Lifti.Querying.QueryParts.WordQueryPart.WordQueryPart(string! word, double? scoreBoost) -> void
Lifti.Querying.ScoredFieldMatch.GetTokenLocations() -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>!
Lifti.Querying.ScoredToken.DocumentId.get -> int
Lifti.Querying.ScoredToken.FieldMatches.get -> System.Collections.Generic.IReadOnlyList<Lifti.Querying.ScoredFieldMatch!>!
Lifti.Querying.ScoredToken.ScoredToken(int documentId, System.Collections.Generic.IReadOnlyList<Lifti.Querying.ScoredFieldMatch!>! fieldMatches) -> void
Lifti.ScoreBoostMetadata
Lifti.SearchResult<TKey>.SearchResult(TKey key, System.Collections.Generic.IReadOnlyList<Lifti.FieldSearchResult!>! locations) -> void
Lifti.Serialization.Binary.BinarySerializer<TKey>.DeserializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.Serialization.Binary.BinarySerializer<TKey>.SerializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.Serialization.Binary.BinarySerializer<TKey>.SerializeAsync(Lifti.IIndexSnapshot<TKey>! snapshot, System.IO.Stream! stream, bool disposeStream = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.Serialization.Binary.IIndexSerializer<TKey>.DeserializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.Serialization.Binary.IIndexSerializer<TKey>.SerializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.Serialization.Binary.IIndexSerializer<TKey>.SerializeAsync(Lifti.IIndexSnapshot<TKey>! snapshot, System.IO.Stream! stream, bool disposeStream = true, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Lifti.Serialization.DeserializedDataCollector<T>
Lifti.Serialization.DeserializedDataCollector<T>.Add(T item) -> void
Lifti.Serialization.DeserializedDataCollector<T>.DeserializedDataCollector(int expectedCount) -> void
Lifti.Serialization.DocumentMetadataCollector<TKey>
Lifti.Serialization.DocumentMetadataCollector<TKey>.DocumentMetadataCollector() -> void
Lifti.Serialization.DocumentMetadataCollector<TKey>.DocumentMetadataCollector(int expectedCount) -> void
Lifti.Serialization.IIndexDeserializer<TKey>
Lifti.Serialization.IIndexDeserializer<TKey>.ReadAsync(Lifti.FullTextIndex<TKey>! index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
Lifti.Serialization.IndexDeserializerBase<TKey>
Lifti.Serialization.IndexDeserializerBase<TKey>.Dispose() -> void
Lifti.Serialization.IndexDeserializerBase<TKey>.IndexDeserializerBase() -> void
Lifti.Serialization.IndexDeserializerBase<TKey>.ReadAsync(Lifti.FullTextIndex<TKey>! index, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Lifti.Serialization.IndexSerializerBase<TKey>
Lifti.Serialization.IndexSerializerBase<TKey>.Dispose() -> void
Lifti.Serialization.IndexSerializerBase<TKey>.IndexSerializerBase() -> void
Lifti.Serialization.IndexSerializerBase<TKey>.WriteAsync(Lifti.IIndexSnapshot<TKey>! snapshot, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Lifti.Serialization.SerializedFieldCollector
Lifti.Serialization.SerializedFieldCollector.SerializedFieldCollector() -> void
Lifti.Serialization.SerializedFieldCollector.SerializedFieldCollector(int expectedCount) -> void
Lifti.Serialization.SerializedFieldIdMap
Lifti.Serialization.SerializedFieldIdMap.Map(byte serializedFieldId) -> byte
Lifti.Serialization.SerializedFieldIdMap.SerializedFieldIdMap() -> void
Lifti.Serialization.SerializedFieldInfo
Lifti.Serialization.SerializedFieldInfo.DynamicFieldReaderName.get -> string?
Lifti.Serialization.SerializedFieldInfo.DynamicFieldReaderName.set -> void
Lifti.Serialization.SerializedFieldInfo.FieldId.get -> byte
Lifti.Serialization.SerializedFieldInfo.FieldId.set -> void
Lifti.Serialization.SerializedFieldInfo.Kind.get -> Lifti.FieldKind
Lifti.Serialization.SerializedFieldInfo.Kind.set -> void
Lifti.Serialization.SerializedFieldInfo.Name.get -> string!
Lifti.Serialization.SerializedFieldInfo.Name.set -> void
Lifti.Serialization.SerializedFieldInfo.SerializedFieldInfo() -> void
Lifti.Serialization.SerializedFieldInfo.SerializedFieldInfo(byte FieldId, string! Name, Lifti.FieldKind Kind, string? DynamicFieldReaderName) -> void
Lifti.Tokenization.IStemmer
Lifti.Tokenization.IStemmer.RequiresAccentInsensitivity.get -> bool
Lifti.Tokenization.IStemmer.RequiresCaseInsensitivity.get -> bool
Lifti.Tokenization.IStemmer.Stem(System.Text.StringBuilder! builder) -> void
Lifti.Tokenization.Objects.ObjectScoreBoostBuilder<TObject>
Lifti.Tokenization.Objects.ObjectScoreBoostBuilder<TObject>.Freshness(System.Func<TObject, System.DateTime?>! freshnessProvider, double multiplier) -> Lifti.Tokenization.Objects.ObjectScoreBoostBuilder<TObject>!
Lifti.Tokenization.Objects.ObjectScoreBoostBuilder<TObject>.Magnitude(System.Func<TObject, double?>! magnitudeProvider, double multiplier) -> Lifti.Tokenization.Objects.ObjectScoreBoostBuilder<TObject>!
Lifti.Tokenization.Objects.ObjectScoreBoostBuilder<TObject>.ObjectScoreBoostBuilder() -> void
Lifti.Tokenization.Objects.ObjectScoreBoostOptions
Lifti.Tokenization.Objects.ObjectScoreBoostOptions.FreshnessMultiplier.get -> double
Lifti.Tokenization.Objects.ObjectScoreBoostOptions.MagnitudeMultiplier.get -> double
Lifti.Tokenization.Objects.ObjectScoreBoostOptions.ObjectScoreBoostOptions(double magnitudeMultiplier, double freshnessMultiplier) -> void
Lifti.Tokenization.Objects.ObjectScoreBoostOptions<TObject>
Lifti.Tokenization.Objects.ObjectScoreBoostOptions<TObject>.FreshnessProvider.get -> System.Func<TObject, System.DateTime?>?
Lifti.Tokenization.Objects.ObjectScoreBoostOptions<TObject>.MagnitudeProvider.get -> System.Func<TObject, double?>?
Lifti.Tokenization.Objects.ObjectScoreBoostOptions<TObject>.ObjectScoreBoostOptions(double magnitudeMultiplier, System.Func<TObject, double?>? magnitudeProvider, double freshnessMultiplier, System.Func<TObject, System.DateTime?>? freshnessProvider) -> void
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.ObjectTokenizationBuilder() -> void
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithDynamicFields(string! dynamicFieldReaderName, System.Func<TObject, System.Collections.Generic.IDictionary<string!, string!>?>! dynamicFieldReader, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithDynamicFields(string! dynamicFieldReaderName, System.Func<TObject, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IEnumerable<string!>!>!>! dynamicFieldReader, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithDynamicFields<TChild>(string! dynamicFieldReaderName, System.Func<TObject, System.Collections.Generic.ICollection<TChild>?>! dynamicFieldReader, System.Func<TChild, string!>! getFieldName, System.Func<TChild, string!>! getFieldText, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithDynamicFields<TChild>(string! dynamicFieldReaderName, System.Func<TObject, System.Collections.Generic.ICollection<TChild>?>! dynamicFieldReader, System.Func<TChild, string!>! getFieldName, System.Func<TChild, System.Collections.Generic.IEnumerable<string!>!>! getFieldText, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithField(string! name, System.Func<TObject, string!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithField(string! name, System.Func<TObject, System.Collections.Generic.IEnumerable<string!>!>! reader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithField(string! name, System.Func<TObject, System.Threading.CancellationToken, System.Threading.Tasks.Task<string!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithField(string! name, System.Func<TObject, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithField(string! name, System.Func<TObject, System.Threading.Tasks.Task<string!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithField(string! name, System.Func<TObject, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, double scoreBoost = 1) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithKey(System.Func<TObject, TKey>! keyReader) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>.WithScoreBoosting(System.Action<Lifti.Tokenization.Objects.ObjectScoreBoostBuilder<TObject>!>! scoreBoostingOptions) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TObject, TKey>!
Lifti.Tokenization.Token.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>!
Lifti.Tokenization.Token.Token(string! token, Lifti.TokenLocation! location) -> void
Lifti.Tokenization.Token.Token(string! token, params Lifti.TokenLocation![]! locations) -> void
Lifti.Tokenization.Token.Token(string! token, System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation!>! locations) -> void
Lifti.TokenizationOptions.Stemmer.get -> Lifti.Tokenization.IStemmer?
Lifti.TokenizerBuilder.SplitOnPunctuation(bool splitOnPunctuation = true) -> Lifti.TokenizerBuilder!
Lifti.TokenizerBuilder.WithStemming() -> Lifti.TokenizerBuilder!
Lifti.TokenizerBuilder.WithStemming(Lifti.Tokenization.IStemmer! stemmer) -> Lifti.TokenizerBuilder!
override Lifti.ChildNodeMap.Equals(object? obj) -> bool
override Lifti.ChildNodeMap.GetHashCode() -> int
override Lifti.DocumentTokenMatchMap.Equals(object? obj) -> bool
override Lifti.DocumentTokenMatchMap.GetHashCode() -> int
override Lifti.IndexedFieldDetails<TObject>.ReadAsync(object! item, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<string!>!>
override Lifti.Querying.IntermediateQueryResult.Equals(object? obj) -> bool
override Lifti.Querying.IntermediateQueryResult.GetHashCode() -> int
override Lifti.Querying.QueryParts.AndQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.ExactWordQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.FuzzyMatchQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.NearQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.OrQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.PrecedingNearQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.PrecedingQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.WildcardQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
override Lifti.Querying.QueryParts.WordQueryPart.RunWeightingCalculation(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
static Lifti.ChildNodeMap.Empty.get -> Lifti.ChildNodeMap
static Lifti.ChildNodeMap.operator !=(Lifti.ChildNodeMap left, Lifti.ChildNodeMap right) -> bool
static Lifti.ChildNodeMap.operator ==(Lifti.ChildNodeMap left, Lifti.ChildNodeMap right) -> bool
static Lifti.DocumentMetadata.ForLooseText<TKey>(int documentId, TKey key, Lifti.DocumentStatistics documentStatistics) -> Lifti.DocumentMetadata<TKey>!
static Lifti.DocumentMetadata.ForObject<TKey>(byte objectTypeId, int documentId, TKey key, Lifti.DocumentStatistics documentStatistics, System.DateTime? scoringFreshnessDate, double? scoringMagnitude) -> Lifti.DocumentMetadata<TKey>!
static Lifti.DocumentTokenMatchMap.Empty.get -> Lifti.DocumentTokenMatchMap
static Lifti.DocumentTokenMatchMap.operator !=(Lifti.DocumentTokenMatchMap left, Lifti.DocumentTokenMatchMap right) -> bool
static Lifti.DocumentTokenMatchMap.operator ==(Lifti.DocumentTokenMatchMap left, Lifti.DocumentTokenMatchMap right) -> bool
static Lifti.Querying.IntermediateQueryResult.operator !=(Lifti.Querying.IntermediateQueryResult left, Lifti.Querying.IntermediateQueryResult right) -> bool
static Lifti.Querying.IntermediateQueryResult.operator ==(Lifti.Querying.IntermediateQueryResult left, Lifti.Querying.IntermediateQueryResult right) -> bool
static Lifti.Querying.QueryContext.Empty.get -> Lifti.Querying.QueryContext!
virtual Lifti.Querying.QueryParts.BinaryQueryOperator.RunWeightingCalculation(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator) -> double
virtual Lifti.Querying.QueryParts.ScoreBoostedQueryPart.ToString(string! searchTerm) -> string!
virtual Lifti.ScoreBoostMetadata.CalculateScoreBoost(Lifti.DocumentMetadata! documentMetadata) -> double
virtual Lifti.Serialization.IndexDeserializerBase<TKey>.Dispose(bool disposing) -> void
virtual Lifti.Serialization.IndexDeserializerBase<TKey>.OnDeserializationCompleteAsync(Lifti.FullTextIndex<TKey>! index, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual Lifti.Serialization.IndexDeserializerBase<TKey>.OnDeserializationStartingAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual Lifti.Serialization.IndexSerializerBase<TKey>.Dispose(bool disposing) -> void
virtual Lifti.Serialization.IndexSerializerBase<TKey>.OnSerializationComplete(Lifti.IIndexSnapshot<TKey>! snapshot, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
virtual Lifti.Serialization.IndexSerializerBase<TKey>.OnSerializationStart(Lifti.IIndexSnapshot<TKey>! snapshot, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
*REMOVED*Lifti.Querying.CompositePositionalIntersectMerger
*REMOVED*Lifti.Querying.CompositePositionalIntersectMerger.CompositePositionalIntersectMerger() -> void
*REMOVED*Lifti.Querying.IntermediateQueryResultMerger
*REMOVED*Lifti.Querying.IntermediateQueryResultMerger.IntermediateQueryResultMerger() -> void
*REMOVED*Lifti.Querying.IntersectMerger
*REMOVED*Lifti.Querying.IntersectMerger.IntersectMerger() -> void
*REMOVED*Lifti.Querying.PrecedingIntersectMerger
*REMOVED*Lifti.Querying.PrecedingIntersectMerger.PrecedingIntersectMerger() -> void
*REMOVED*Lifti.Querying.UnionMerger
*REMOVED*Lifti.Querying.UnionMerger.UnionMerger() -> void
*REMOVED*static Lifti.Querying.CompositePositionalIntersectMerger.Apply(Lifti.Querying.IntermediateQueryResult left, Lifti.Querying.IntermediateQueryResult right, int leftTolerance, int rightTolerance) -> System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredToken>!
*REMOVED*static Lifti.Querying.IntermediateQueryResultMerger.JoinFields(System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredFieldMatch>! leftFields, System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredFieldMatch>! rightFields) -> System.Collections.Generic.IList<(byte fieldId, double score, System.Collections.Generic.IReadOnlyList<Lifti.Querying.ITokenLocationMatch!>! leftLocations, System.Collections.Generic.IReadOnlyList<Lifti.Querying.ITokenLocationMatch!>! rightLocations)>!
*REMOVED*static Lifti.Querying.IntermediateQueryResultMerger.MergeFields(Lifti.Querying.ScoredToken leftMatch, Lifti.Querying.ScoredToken rightMatch) -> System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredFieldMatch>!
*REMOVED*static Lifti.Querying.IntermediateQueryResultMerger.SwapIf<T>(bool condition, ref T left, ref T right) -> void
*REMOVED*static Lifti.Querying.IntersectMerger.Apply(Lifti.Querying.IntermediateQueryResult left, Lifti.Querying.IntermediateQueryResult right) -> System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredToken>!
*REMOVED*static Lifti.Querying.PrecedingIntersectMerger.Apply(Lifti.Querying.IntermediateQueryResult left, Lifti.Querying.IntermediateQueryResult right) -> System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredToken>!
*REMOVED*static Lifti.Querying.UnionMerger.Apply(Lifti.Querying.IntermediateQueryResult left, Lifti.Querying.IntermediateQueryResult right) -> System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredToken>!
*REMOVED*Lifti.Serialization.Binary.BinarySerializer<TKey>.DeserializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Serialization.Binary.BinarySerializer<TKey>.SerializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Serialization.Binary.BinarySerializer<TKey>.SerializeAsync(Lifti.IIndexSnapshot<TKey>! snapshot, System.IO.Stream! stream, bool disposeStream = true) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Serialization.Binary.IIndexSerializer<TKey>.DeserializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Serialization.Binary.IIndexSerializer<TKey>.SerializeAsync(Lifti.FullTextIndex<TKey>! index, System.IO.Stream! stream, bool disposeStream = true) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Serialization.Binary.IIndexSerializer<TKey>.SerializeAsync(Lifti.IIndexSnapshot<TKey>! snapshot, System.IO.Stream! stream, bool disposeStream = true) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.ObjectTokenizationBuilder() -> void
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithDynamicFields(string! dynamicFieldReaderName, System.Func<T, System.Collections.Generic.IDictionary<string!, string!>?>! dynamicFieldReader, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithDynamicFields(string! dynamicFieldReaderName, System.Func<T, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IEnumerable<string!>!>!>! dynamicFieldReader, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithDynamicFields<TChild>(string! dynamicFieldReaderName, System.Func<T, System.Collections.Generic.ICollection<TChild>?>! dynamicFieldReader, System.Func<TChild, string!>! getFieldName, System.Func<TChild, string!>! getFieldText, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithDynamicFields<TChild>(string! dynamicFieldReaderName, System.Func<T, System.Collections.Generic.ICollection<TChild>?>! dynamicFieldReader, System.Func<TChild, string!>! getFieldName, System.Func<TChild, System.Collections.Generic.IEnumerable<string!>!>! getFieldText, string? fieldNamePrefix = null, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithField(string! name, System.Func<T, string!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithField(string! name, System.Func<T, System.Collections.Generic.IEnumerable<string!>!>! reader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithField(string! name, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<string!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithField(string! name, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithField(string! name, System.Func<T, System.Threading.Tasks.Task<string!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithField(string! name, System.Func<T, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!>! fieldTextReader, System.Func<Lifti.TokenizerBuilder!, Lifti.TokenizerBuilder!>? tokenizationOptions = null, System.Func<Lifti.ThesaurusBuilder!, Lifti.ThesaurusBuilder!>? thesaurusOptions = null, Lifti.Tokenization.TextExtraction.ITextExtractor? textExtractor = null) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>.WithKey(System.Func<T, TKey>! keyReader) -> Lifti.Tokenization.Objects.ObjectTokenizationBuilder<T, TKey>!
*REMOVED*abstract Lifti.Querying.QueryParts.BinaryQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*abstract Lifti.Querying.QueryParts.WordQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.Querying.QueryParts.AdjacentWordsQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.Querying.QueryParts.BracketedQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.Querying.QueryParts.EmptyQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.Querying.QueryParts.FieldFilterQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.Querying.QueryParts.IQueryContext
*REMOVED*Lifti.Querying.QueryParts.IQueryContext.ApplyTo(Lifti.Querying.IntermediateQueryResult intermediateQueryResult) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.Querying.QueryParts.IQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.Querying.QueryParts.WildcardQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*override Lifti.Querying.QueryParts.AndQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*override Lifti.Querying.QueryParts.ExactWordQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*override Lifti.Querying.QueryParts.FuzzyMatchQueryPart.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*override Lifti.Querying.QueryParts.NearQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*override Lifti.Querying.QueryParts.OrQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*override Lifti.Querying.QueryParts.PrecedingNearQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*override Lifti.Querying.QueryParts.PrecedingQueryOperator.Evaluate(System.Func<Lifti.Querying.IIndexNavigator!>! navigatorCreator, Lifti.Querying.QueryParts.IQueryContext! queryContext) -> Lifti.Querying.IntermediateQueryResult
*REMOVED*Lifti.FullTextIndex<TKey>.Items.get -> Lifti.IItemStore<TKey>!
*REMOVED*Lifti.IFullTextIndex<TKey>.Items.get -> Lifti.IItemStore<TKey>!
*REMOVED*Lifti.IIndexSnapshot.Items.get -> Lifti.IItemStore!
*REMOVED*Lifti.IIndexSnapshot<TKey>.Items.get -> Lifti.IItemStore<TKey>!
*REMOVED*Lifti.IItemStore
*REMOVED*Lifti.IItemStore.Count.get -> int
*REMOVED*Lifti.IItemStore.GetMetadata(int id) -> Lifti.IItemMetadata!
*REMOVED*Lifti.IItemStore.IndexStatistics.get -> Lifti.IndexStatistics!
*REMOVED*Lifti.IItemStore<TKey>
*REMOVED*Lifti.IItemStore<TKey>.Contains(TKey item) -> bool
*REMOVED*Lifti.IItemStore<TKey>.GetIndexedItems() -> System.Collections.Generic.IEnumerable<Lifti.ItemMetadata<TKey>!>!
*REMOVED*Lifti.IItemStore<TKey>.GetMetadata(int id) -> Lifti.IItemMetadata<TKey>!
*REMOVED*Lifti.IItemStore<TKey>.GetMetadata(TKey item) -> Lifti.IItemMetadata<TKey>!
*REMOVED*Lifti.IItemStore<TKey>.Snapshot() -> Lifti.IItemStore<TKey>!
*REMOVED*Lifti.IndexSnapshot<TKey>.Items.get -> Lifti.IItemStore<TKey>!
*REMOVED*Lifti.ItemStore<T>
*REMOVED*Lifti.ItemStore<T>.Contains(T item) -> bool
*REMOVED*Lifti.ItemStore<T>.Count.get -> int
*REMOVED*Lifti.ItemStore<T>.GetIndexedItems() -> System.Collections.Generic.IEnumerable<Lifti.ItemMetadata<T>!>!
*REMOVED*Lifti.ItemStore<T>.GetMetadata(int id) -> Lifti.IItemMetadata<T>!
*REMOVED*Lifti.ItemStore<T>.GetMetadata(T item) -> Lifti.IItemMetadata<T>!
*REMOVED*Lifti.ItemStore<T>.IndexStatistics.get -> Lifti.IndexStatistics!
*REMOVED*Lifti.ItemStore<T>.Snapshot() -> Lifti.IItemStore<T>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrases(System.Func<TKey, string!>! loadText) -> System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync(System.Func<TKey, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<string!>>! loadTextAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey>!>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync(System.Func<TKey, System.Threading.Tasks.ValueTask<string!>>! loadTextAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey>!>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TItem>(System.Func<System.Collections.Generic.IReadOnlyList<TKey>!, System.Collections.Generic.IReadOnlyList<TItem>!>! loadItems, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey, TItem>!>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TItem>(System.Func<System.Collections.Generic.IReadOnlyList<TKey>!, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<TItem>!>>! loadItemsAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey, TItem>!>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TItem>(System.Func<System.Collections.Generic.IReadOnlyList<TKey>!, System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<TItem>!>>! loadItemsAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey, TItem>!>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TItem>(System.Func<TKey, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TItem>>! loadItemAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey, TItem>!>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TItem>(System.Func<TKey, System.Threading.Tasks.ValueTask<TItem>>! loadItemAsync, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey, TItem>!>!>!
*REMOVED*Lifti.ISearchResults<TKey>.CreateMatchPhrasesAsync<TItem>(System.Func<TKey, TItem>! loadItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Lifti.ItemPhrases<TKey, TItem>!>!>!
*REMOVED*Lifti.ItemPhrases<TKey, TItem>
*REMOVED*Lifti.ItemPhrases<TKey, TItem>.Item.get -> TItem
*REMOVED*Lifti.ItemPhrases<TKey, TItem>.Item.init -> void
*REMOVED*Lifti.ItemPhrases<TKey, TItem>.ItemPhrases(TItem item, Lifti.SearchResult<TKey>! SearchResult, System.Collections.Generic.IReadOnlyList<Lifti.FieldPhrases<TKey>!>! phrases) -> void
*REMOVED*Lifti.ItemPhrases<TKey>
*REMOVED*Lifti.ItemPhrases<TKey>.EnumeratePhrases() -> System.Collections.Generic.IEnumerable<string!>!
*REMOVED*Lifti.ItemPhrases<TKey>.FieldPhrases.get -> System.Collections.Generic.IReadOnlyList<Lifti.FieldPhrases<TKey>!>!
*REMOVED*Lifti.ItemPhrases<TKey>.FieldPhrases.init -> void
*REMOVED*Lifti.ItemPhrases<TKey>.ItemPhrases(Lifti.SearchResult<TKey>! SearchResult, System.Collections.Generic.IReadOnlyList<Lifti.FieldPhrases<TKey>!>! FieldPhrases) -> void
*REMOVED*Lifti.ItemPhrases<TKey>.SearchResult.get -> Lifti.SearchResult<TKey>!
*REMOVED*Lifti.ItemPhrases<TKey>.SearchResult.init -> void
*REMOVED*Lifti.IItemMetadata
*REMOVED*Lifti.IItemMetadata.DocumentStatistics.get -> Lifti.DocumentStatistics!
*REMOVED*Lifti.IItemMetadata.Id.get -> int
*REMOVED*Lifti.IItemMetadata<TKey>
*REMOVED*Lifti.IItemMetadata<TKey>.Item.get -> TKey
*REMOVED*Lifti.IItemStore.GetMetadata(int id) -> Lifti.IItemMetadata!
*REMOVED*Lifti.IItemStore<TKey>.GetIndexedItems() -> System.Collections.Generic.IEnumerable<Lifti.ItemMetadata<TKey>!>!
*REMOVED*Lifti.IItemStore<TKey>.GetMetadata(int id) -> Lifti.IItemMetadata<TKey>!
*REMOVED*Lifti.IItemStore<TKey>.GetMetadata(TKey item) -> Lifti.IItemMetadata<TKey>!
*REMOVED*Lifti.ItemMetadata<T>
*REMOVED*Lifti.ItemMetadata<T>.DocumentStatistics.get -> Lifti.DocumentStatistics!
*REMOVED*Lifti.ItemMetadata<T>.Id.get -> int
*REMOVED*Lifti.ItemMetadata<T>.Item.get -> T
*REMOVED*Lifti.ItemMetadata<T>.ItemMetadata(int id, T item, Lifti.DocumentStatistics! documentStatistics) -> void
*REMOVED*Lifti.ItemStore<T>.GetIndexedItems() -> System.Collections.Generic.IEnumerable<Lifti.ItemMetadata<T>!>!
*REMOVED*Lifti.ItemStore<T>.GetMetadata(int id) -> Lifti.IItemMetadata<T>!
*REMOVED*Lifti.ItemStore<T>.GetMetadata(T item) -> Lifti.IItemMetadata<T>!
*REMOVED*Lifti.DuplicateItemBehavior
*REMOVED*Lifti.DuplicateItemBehavior.ReplaceItem = 0 -> Lifti.DuplicateItemBehavior
*REMOVED*Lifti.DuplicateItemBehavior.ThrowException = 1 -> Lifti.DuplicateItemBehavior
*REMOVED*Lifti.FullTextIndexBuilder<TKey>.WithDuplicateItemBehavior(Lifti.DuplicateItemBehavior duplicateItemBehavior) -> Lifti.FullTextIndexBuilder<TKey>!
*REMOVED*Lifti.IndexOptions.DuplicateItemBehavior.get -> Lifti.DuplicateItemBehavior
*REMOVED*Lifti.IndexedFieldDetails<TItem>
*REMOVED*Lifti.FullTextIndex<TKey>.AddAsync(TKey itemKey, string! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.FullTextIndex<TKey>.AddAsync(TKey itemKey, System.Collections.Generic.IEnumerable<string!>! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.FullTextIndex<TKey>.AddAsync<TItem>(TItem item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.IFullTextIndex<TKey>.AddAsync(TKey itemKey, string! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.IFullTextIndex<TKey>.AddAsync(TKey itemKey, System.Collections.Generic.IEnumerable<string!>! text, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.IFullTextIndex<TKey>.AddAsync<TItem>(TItem item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Querying.QueryParts.WildcardQueryPart.WildcardQueryPart(System.Collections.Generic.IEnumerable<Lifti.Querying.QueryParts.WildcardQueryFragment>! fragments) -> void
*REMOVED*Lifti.Querying.QueryParts.WordQueryPart.WordQueryPart(string! word) -> void
*REMOVED*Lifti.Querying.QueryParts.ExactWordQueryPart.ExactWordQueryPart(string! word) -> void
*REMOVED*Lifti.Querying.QueryParts.FuzzyMatchQueryPart.FuzzyMatchQueryPart(string! word, ushort maxEditDistance = 4, ushort maxSequentialEdits = 1) -> void
*REMOVED*Lifti.FullTextIndex<TKey>.RemoveAsync(TKey itemKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
*REMOVED*Lifti.IFullTextIndex<TKey>.RemoveAsync(TKey itemKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
*REMOVED*Lifti.IdPool<T>
*REMOVED*Lifti.IdPool<T>.Add(int id, T item, Lifti.DocumentStatistics! documentStatistics) -> void
*REMOVED*Lifti.IdPool<T>.Add(T item, Lifti.DocumentStatistics! documentStatistics) -> int
*REMOVED*Lifti.IdPool<T>.IdPool() -> void
*REMOVED*Lifti.IdPool<T>.ReleaseItem(T item) -> int
*REMOVED*Lifti.IIndexNodeFactory.CreateNode(System.ReadOnlyMemory<char> intraNodeText, System.Collections.Immutable.ImmutableDictionary<char, Lifti.IndexNode!>! childNodes, System.Collections.Immutable.ImmutableDictionary<int, System.Collections.Immutable.ImmutableList<Lifti.IndexedToken>!>! matches) -> Lifti.IndexNode!
*REMOVED*Lifti.IndexNode.ChildNodes.get -> System.Collections.Immutable.ImmutableDictionary<char, Lifti.IndexNode!>!
*REMOVED*Lifti.IndexNode.Matches.get -> System.Collections.Immutable.ImmutableDictionary<int, System.Collections.Immutable.ImmutableList<Lifti.IndexedToken>!>!
*REMOVED*Lifti.IndexNodeFactory.CreateNode(System.ReadOnlyMemory<char> intraNodeText, System.Collections.Immutable.ImmutableDictionary<char, Lifti.IndexNode!>! childNodes, System.Collections.Immutable.ImmutableDictionary<int, System.Collections.Immutable.ImmutableList<Lifti.IndexedToken>!>! matches) -> Lifti.IndexNode!
*REMOVED*Lifti.IndexStatistics.TokenCountByField.get -> System.Collections.Immutable.ImmutableDictionary<byte, long>!
*REMOVED*Lifti.Querying.IntermediateQueryResult.IntermediateQueryResult(System.Collections.Generic.IEnumerable<Lifti.Querying.ScoredToken>! matches) -> void
*REMOVED*Lifti.Querying.QueryTokenMatch.QueryTokenMatch(int itemId, System.Collections.Generic.IReadOnlyList<Lifti.Querying.FieldMatch>! fieldMatches) -> void
*REMOVED*Lifti.Querying.ScoredToken.ScoredToken(int itemId, System.Collections.Generic.IReadOnlyList<Lifti.Querying.ScoredFieldMatch>! fieldMatches) -> void
*REMOVED*Lifti.SearchResult<TKey>.SearchResult(TKey item, System.Collections.Generic.IReadOnlyList<Lifti.FieldSearchResult!>! locations) -> void
*REMOVED*Lifti.Serialization.Binary.IIndexReader<TKey>
*REMOVED*Lifti.Serialization.Binary.IIndexReader<TKey>.ReadIntoAsync(Lifti.FullTextIndex<TKey>! index) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.FullTextIndexBuilder<TKey>.WithObjectTokenization<TItem>(System.Func<Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TItem, TKey>!, Lifti.Tokenization.Objects.ObjectTokenizationBuilder<TItem, TKey>!>! optionsBuilder) -> Lifti.FullTextIndexBuilder<TKey>!
*REMOVED*Lifti.TokenizationOptions.Stemming.get -> bool
*REMOVED*Lifti.TokenizerBuilder.SplitOnPunctuation(bool splitOnPunctionation = true) -> Lifti.TokenizerBuilder!
*REMOVED*override Lifti.IndexedFieldDetails<TItem>.ReadAsync(object! item, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<string!>!>
*REMOVED*Lifti.FullTextIndex<TKey>.AddRangeAsync<TItem>(System.Collections.Generic.IEnumerable<TItem>! items, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.LiftiException.LiftiException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
*REMOVED*Lifti.IFullTextIndex<TKey>.AddRangeAsync<TItem>(System.Collections.Generic.IEnumerable<TItem>! items, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
*REMOVED*Lifti.Querying.QueryParserException.QueryParserException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
virtual Lifti.TokenLocation.CompareTo(Lifti.TokenLocation? other) -> int
virtual Lifti.TokenLocation.Equals(Lifti.TokenLocation? other) -> bool

*REMOVED*Lifti.Querying.IScorer.Score(System.Collections.Generic.IReadOnlyList<Lifti.Querying.QueryTokenMatch>! tokens, double weighting) -> System.Collections.Generic.IReadOnlyList<Lifti.Querying.ScoredToken>!
*REMOVED*Lifti.Querying.QueryTokenMatch
*REMOVED*Lifti.Querying.QueryTokenMatch.Equals(Lifti.Querying.QueryTokenMatch other) -> bool
*REMOVED*Lifti.Querying.QueryTokenMatch.FieldMatches.get -> System.Collections.Generic.IReadOnlyList<Lifti.Querying.FieldMatch>!
*REMOVED*Lifti.Querying.QueryTokenMatch.ItemId.get -> int
*REMOVED*Lifti.Querying.QueryTokenMatch.QueryTokenMatch() -> void
*REMOVED*Lifti.Querying.QueryTokenMatch.QueryTokenMatch(int itemId, System.Collections.Generic.IReadOnlyList<Lifti.Querying.FieldMatch>! fieldMatches) -> void
*REMOVED*override Lifti.Querying.QueryTokenMatch.Equals(object? obj) -> bool
*REMOVED*override Lifti.Querying.QueryTokenMatch.GetHashCode() -> int
*REMOVED*static Lifti.Querying.QueryTokenMatch.operator !=(Lifti.Querying.QueryTokenMatch left, Lifti.Querying.QueryTokenMatch right) -> bool
*REMOVED*static Lifti.Querying.QueryTokenMatch.operator ==(Lifti.Querying.QueryTokenMatch left, Lifti.Querying.QueryTokenMatch right) -> bool
*REMOVED*Lifti.Querying.FieldMatch
*REMOVED*Lifti.Querying.FieldMatch.Equals(Lifti.Querying.FieldMatch other) -> bool
*REMOVED*Lifti.Querying.FieldMatch.FieldId.get -> byte
*REMOVED*Lifti.Querying.FieldMatch.FieldMatch() -> void
*REMOVED*Lifti.Querying.FieldMatch.FieldMatch(byte fieldId, System.Collections.Generic.IEnumerable<Lifti.Querying.ITokenLocationMatch!>! locations) -> void
*REMOVED*Lifti.Querying.FieldMatch.FieldMatch(Lifti.IndexedToken token) -> void
*REMOVED*Lifti.Querying.FieldMatch.GetTokenLocations() -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation>!
*REMOVED*Lifti.Querying.FieldMatch.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.Querying.ITokenLocationMatch!>!
*REMOVED*Lifti.Querying.QueryTokenMatch.FieldMatches.get -> System.Collections.Generic.IReadOnlyList<Lifti.Querying.FieldMatch>!
*REMOVED*Lifti.Querying.QueryTokenMatch.QueryTokenMatch(int itemId, System.Collections.Generic.IReadOnlyList<Lifti.Querying.FieldMatch>! fieldMatches) -> void
*REMOVED*Lifti.Querying.ScoredFieldMatch.FieldMatch.get -> Lifti.Querying.FieldMatch
*REMOVED*Lifti.Querying.ScoredFieldMatch.ScoredFieldMatch(double score, Lifti.Querying.FieldMatch fieldMatch) -> void
*REMOVED*override Lifti.Querying.FieldMatch.Equals(object? obj) -> bool
*REMOVED*override Lifti.Querying.FieldMatch.GetHashCode() -> int
*REMOVED*static Lifti.Querying.FieldMatch.operator !=(Lifti.Querying.FieldMatch left, Lifti.Querying.FieldMatch right) -> bool
*REMOVED*static Lifti.Querying.FieldMatch.operator ==(Lifti.Querying.FieldMatch left, Lifti.Querying.FieldMatch right) -> bool

*REMOVED*Lifti.FieldSearchResult.FieldSearchResult(string! foundIn, double score, System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation>! locations) -> void
*REMOVED*Lifti.FieldSearchResult.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation>!
*REMOVED*Lifti.IndexedToken.IndexedToken(byte fieldId, params Lifti.TokenLocation[]! locations) -> void
*REMOVED*Lifti.IndexedToken.IndexedToken(byte fieldId, System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation>! locations) -> void
*REMOVED*Lifti.IndexedToken.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation>!
*REMOVED*Lifti.Querying.CompositeTokenMatchLocation
*REMOVED*Lifti.Querying.CompositeTokenMatchLocation.CompositeTokenMatchLocation() -> void
*REMOVED*Lifti.Querying.CompositeTokenMatchLocation.CompositeTokenMatchLocation(Lifti.Querying.ITokenLocationMatch! leftToken, Lifti.Querying.ITokenLocationMatch! rightToken) -> void
*REMOVED*Lifti.Querying.CompositeTokenMatchLocation.Equals(Lifti.Querying.CompositeTokenMatchLocation other) -> bool
*REMOVED*Lifti.Querying.CompositeTokenMatchLocation.GetLocations() -> System.Collections.Generic.IEnumerable<Lifti.TokenLocation>!
*REMOVED*Lifti.Querying.CompositeTokenMatchLocation.MaxTokenIndex.get -> int
*REMOVED*Lifti.Querying.CompositeTokenMatchLocation.MinTokenIndex.get -> int
*REMOVED*override Lifti.Querying.CompositeTokenMatchLocation.Equals(object? obj) -> bool
*REMOVED*override Lifti.Querying.CompositeTokenMatchLocation.GetHashCode() -> int
*REMOVED*override Lifti.Querying.CompositeTokenMatchLocation.ToString() -> string!
*REMOVED*static Lifti.Querying.CompositeTokenMatchLocation.operator !=(Lifti.Querying.CompositeTokenMatchLocation left, Lifti.Querying.CompositeTokenMatchLocation right) -> bool
*REMOVED*static Lifti.Querying.CompositeTokenMatchLocation.operator ==(Lifti.Querying.CompositeTokenMatchLocation left, Lifti.Querying.CompositeTokenMatchLocation right) -> bool

*REMOVED*Lifti.Querying.ITokenLocationMatch
*REMOVED*Lifti.Querying.ITokenLocationMatch.GetLocations() -> System.Collections.Generic.IEnumerable<Lifti.TokenLocation>!
*REMOVED*Lifti.Querying.ITokenLocationMatch.MaxTokenIndex.get -> int
*REMOVED*Lifti.Querying.ITokenLocationMatch.MinTokenIndex.get -> int
*REMOVED*Lifti.Querying.ScoredFieldMatch.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.Querying.ITokenLocationMatch!>!
*REMOVED*Lifti.Querying.ScoredFieldMatch.ScoredFieldMatch() -> void

*REMOVED*Lifti.Querying.ScoredToken.FieldMatches.get -> System.Collections.Generic.IReadOnlyList<Lifti.Querying.ScoredFieldMatch>!
*REMOVED*Lifti.Querying.SingleTokenLocationMatch
*REMOVED*Lifti.Querying.SingleTokenLocationMatch.Equals(Lifti.Querying.SingleTokenLocationMatch other) -> bool
*REMOVED*Lifti.Querying.SingleTokenLocationMatch.GetLocations() -> System.Collections.Generic.IEnumerable<Lifti.TokenLocation>!
*REMOVED*Lifti.Querying.SingleTokenLocationMatch.MaxTokenIndex.get -> int
*REMOVED*Lifti.Querying.SingleTokenLocationMatch.MinTokenIndex.get -> int
*REMOVED*Lifti.Querying.SingleTokenLocationMatch.SingleTokenLocationMatch() -> void
*REMOVED*Lifti.Querying.SingleTokenLocationMatch.SingleTokenLocationMatch(Lifti.TokenLocation original) -> void
*REMOVED*override Lifti.Querying.SingleTokenLocationMatch.Equals(object? obj) -> bool
*REMOVED*override Lifti.Querying.SingleTokenLocationMatch.GetHashCode() -> int
*REMOVED*override Lifti.Querying.SingleTokenLocationMatch.ToString() -> string!
*REMOVED*static Lifti.Querying.SingleTokenLocationMatch.operator !=(Lifti.Querying.SingleTokenLocationMatch left, Lifti.Querying.SingleTokenLocationMatch right) -> bool
*REMOVED*static Lifti.Querying.SingleTokenLocationMatch.operator ==(Lifti.Querying.SingleTokenLocationMatch left, Lifti.Querying.SingleTokenLocationMatch right) -> bool

*REMOVED*Lifti.Tokenization.Token.Locations.get -> System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation>!
*REMOVED*Lifti.Tokenization.Token.Token(string! token, Lifti.TokenLocation location) -> void
*REMOVED*Lifti.Tokenization.Token.Token(string! token, params Lifti.TokenLocation[]! locations) -> void
*REMOVED*Lifti.Tokenization.Token.Token(string! token, System.Collections.Generic.IReadOnlyList<Lifti.TokenLocation>! locations) -> void
*REMOVED*Lifti.TokenLocation.CompareTo(Lifti.TokenLocation other) -> int
*REMOVED*Lifti.TokenLocation.TokenLocation() -> void