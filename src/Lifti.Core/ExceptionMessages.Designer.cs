//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lifti {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Lifti.ExceptionMessages", typeof(ExceptionMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When fields are configured with async access methods the async Add methods must be used on the index.
        /// </summary>
        internal static string AsyncAddMethodsMustBeUsed {
            get {
                return ResourceManager.GetString("AsyncAddMethodsMustBeUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one field must be configured for an item.
        /// </summary>
        internal static string AtLeastOneFieldMustBeIndexed {
            get {
                return ResourceManager.GetString("AtLeastOneFieldMustBeIndexed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot start a new batch change while another is already in progress..
        /// </summary>
        internal static string BatchChangeAlreadyStarted {
            get {
                return ResourceManager.GetString("BatchChangeAlreadyStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index was serialized with binary serialization version {0} and is incompatible with this release of LIFTI..
        /// </summary>
        internal static string EarlierVersionSerializedIndexNotSupported {
            get {
                return ResourceManager.GetString("EarlierVersionSerializedIndexNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adjacent text query parts cannot be empty.
        /// </summary>
        internal static string EmptyAdjacentTextPartsAreNotSupported {
            get {
                return ResourceManager.GetString("EmptyAdjacentTextPartsAreNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bracketed query parts cannot be empty.
        /// </summary>
        internal static string EmptyBracketedExpressionsAreNotSupported {
            get {
                return ResourceManager.GetString("EmptyBracketedExpressionsAreNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error - missing text value.
        /// </summary>
        internal static string EmptyOrMissingTextQueryFragmentValue {
            get {
                return ResourceManager.GetString("EmptyOrMissingTextQueryFragmentValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected at least one query part to be parsed.
        /// </summary>
        internal static string ExpectedAtLeastOneQueryPartParsed {
            get {
                return ResourceManager.GetString("ExpectedAtLeastOneQueryPartParsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A text fragment must follow a multi-character wildcard in a wildcard expression.
        /// </summary>
        internal static string ExpectedTextQueryFragmentAfterMultiCharacterWildcard {
            get {
                return ResourceManager.GetString("ExpectedTextQueryFragmentAfterMultiCharacterWildcard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected a text token - got {0}.
        /// </summary>
        internal static string ExpectedTextToken {
            get {
                return ResourceManager.GetString("ExpectedTextToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token expected: {0}.
        /// </summary>
        internal static string ExpectedToken {
            get {
                return ResourceManager.GetString("ExpectedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field id {0} has no associated field name.
        /// </summary>
        internal static string FieldHasNoAssociatedFieldName {
            get {
                return ResourceManager.GetString("FieldHasNoAssociatedFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate field name used: {0}. Field names must be unique across all item types registered with an index..
        /// </summary>
        internal static string FieldNameAlreadyUsed {
            get {
                return ResourceManager.GetString("FieldNameAlreadyUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name must not be empty.
        /// </summary>
        internal static string FieldNameMustNotBeEmpty {
            get {
                return ResourceManager.GetString("FieldNameMustNotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Id {0} is already registered in the index..
        /// </summary>
        internal static string IdAlreadyUsed {
            get {
                return ResourceManager.GetString("IdAlreadyUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An index must be empty when attempting to deserialize its contents..
        /// </summary>
        internal static string IndexMustBeEmptyForDeserialization {
            get {
                return ResourceManager.GetString("IndexMustBeEmptyForDeserialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item already indexed.
        /// </summary>
        internal static string ItemAlreadyIndexed {
            get {
                return ResourceManager.GetString("ItemAlreadyIndexed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Item not found.
        /// </summary>
        internal static string ItemNotFound {
            get {
                return ResourceManager.GetString("ItemNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A key reader must be specified with a call to WithKey wen configuring item tokenization options.
        /// </summary>
        internal static string KeyReaderMustBeProvided {
            get {
                return ResourceManager.GetString("KeyReaderMustBeProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Malformed index data encountered - expected a full location entry.
        /// </summary>
        internal static string MalformedDataExpectedFullLocationEntry {
            get {
                return ResourceManager.GetString("MalformedDataExpectedFullLocationEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only 255 distinct fields can currently be indexed.
        /// </summary>
        internal static string MaximumDistinctFieldsIndexReached {
            get {
                return ResourceManager.GetString("MaximumDistinctFieldsIndexReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only tokens up to {0} characters long can be indexed..
        /// </summary>
        internal static string MaxTokenLengthExceeded {
            get {
                return ResourceManager.GetString("MaxTokenLengthExceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index terminator was not found at the end of the file..
        /// </summary>
        internal static string MissingIndexTerminator {
            get {
                return ResourceManager.GetString("MissingIndexTerminator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expected header bytes could not be found in the stream - this is probably not a serialized index..
        /// </summary>
        internal static string MissingLiftiHeaderIndicatorBytes {
            get {
                return ResourceManager.GetString("MissingLiftiHeaderIndicatorBytes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No batch change in progress..
        /// </summary>
        internal static string NoBatchChangeInProgress {
            get {
                return ResourceManager.GetString("NoBatchChangeInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No deserializer available for binary serialized version {0}..
        /// </summary>
        internal static string NoDeserializerAvailableForIndexVersion {
            get {
                return ResourceManager.GetString("NoDeserializerAvailableForIndexVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No reader delegates configured.
        /// </summary>
        internal static string NoReaderDelegatesConfigured {
            get {
                return ResourceManager.GetString("NoReaderDelegatesConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to score a query result with no scorer initialized.
        /// </summary>
        internal static string NoScorerInitialized {
            get {
                return ResourceManager.GetString("NoScorerInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No tokenization options have been provided for type {0}.
        /// </summary>
        internal static string NoTokenizationOptionsProvidedForType {
            get {
                return ResourceManager.GetString("NoTokenizationOptionsProvidedForType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single character wildcards (%) following a multi-character wildcard (*) are not currently supported..
        /// </summary>
        internal static string SingleCharacterWildcardsFollowingMultiCharacterNotSupported {
            get {
                return ResourceManager.GetString("SingleCharacterWildcardsFollowingMultiCharacterNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A timeout occurred waiting for index write lock.
        /// </summary>
        internal static string TimeoutWaitingForWriteLock {
            get {
                return ResourceManager.GetString("TimeoutWaitingForWriteLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EnumerateIndexedTokens cannot be called after applying a bookmark.
        /// </summary>
        internal static string UnableToEnumerateIndexedTokensAfterApplyingBookmark {
            get {
                return ResourceManager.GetString("UnableToEnumerateIndexedTokensAfterApplyingBookmark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read header data from serialized index content..
        /// </summary>
        internal static string UnableToReadHeaderInformation {
            get {
                return ResourceManager.GetString("UnableToReadHeaderInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The query ended unexpectedly - a token was expected..
        /// </summary>
        internal static string UnexpectedEndOfQuery {
            get {
                return ResourceManager.GetString("UnexpectedEndOfQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unexpected operator was encountered: {0}.
        /// </summary>
        internal static string UnexpectedOperator {
            get {
                return ResourceManager.GetString("UnexpectedOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error - An unexpected operator was encountered: {0}.
        /// </summary>
        internal static string UnexpectedOperatorInternal {
            get {
                return ResourceManager.GetString("UnexpectedOperatorInternal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected token encountered: {0}.
        /// </summary>
        internal static string UnexpectedTokenEncountered {
            get {
                return ResourceManager.GetString("UnexpectedTokenEncountered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown field &apos;{0}&apos;.
        /// </summary>
        internal static string UnknownField {
            get {
                return ResourceManager.GetString("UnknownField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown operator encountered: {0}.
        /// </summary>
        internal static string UnknownOperatorEncountered {
            get {
                return ResourceManager.GetString("UnknownOperatorEncountered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported index support level {0}.
        /// </summary>
        internal static string UnsupportedIndexSupportLevel {
            get {
                return ResourceManager.GetString("UnsupportedIndexSupportLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value must not be less than zero.
        /// </summary>
        internal static string ValueMustNotBeLessThanZero {
            get {
                return ResourceManager.GetString("ValueMustNotBeLessThanZero", resourceCulture);
            }
        }
    }
}
